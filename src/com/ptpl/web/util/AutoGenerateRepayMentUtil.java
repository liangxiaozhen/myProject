package com.ptpl.web.util;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.util.Assert;

import com.ptpl.controller.SpringContextHolder;
import com.ptpl.controller.huifu.OraceTest;
import com.ptpl.model.DebtAttorn;
import com.ptpl.model.DividedPayments;
import com.ptpl.model.InterestExpense;
import com.ptpl.model.InterestExpenseRecord;
import com.ptpl.model.RepayMent;
import com.ptpl.model.TenderItem;
import com.ptpl.model.UserAccountSafeInfo;
import com.ptpl.model.UserFsAccountInfo;
import com.ptpl.model.UserInterestRateCoupon;
import com.ptpl.model.UserRedEnvelope;
import com.ptpl.model.UserTender;
import com.ptpl.model.UserTenderPlusLink;
import com.ptpl.service.DebtAttornServiceI;
import com.ptpl.service.DividedPaymentsServiceI;
import com.ptpl.service.InterestExpenseRecordServiceI;
import com.ptpl.service.InterestExpenseServiceI;
import com.ptpl.service.RepayMentServiceI;
import com.ptpl.service.TenderItemServiceI;
import com.ptpl.service.UserAccountSafeInfoServiceI;
import com.ptpl.service.UserFsAccountInfoServiceI;
import com.ptpl.service.UserInterestRateCouponServiceI;
import com.ptpl.service.UserRedEnvelopeServiceI;
import com.ptpl.service.UserTenderPlusLinkServiceI;
import com.ptpl.service.UserTenderServiceI;
import com.ptpl.service.impl.UserFsAccountInfoServiceImpl;

/**
 * 
* @ClassName: AutoGenerateRepayMentUtil 
* @Package com.ptpl.web.util 
* @Description: TODO(自动生成 还款计划 和还款具体记录 工具类) 
* @author cjm
* @date 2016年10月15日 下午3:32:54 
* @version V1.0
 */
public class AutoGenerateRepayMentUtil {
	
	public static Log repayLogger = LogFactory.getLog(AutoGenerateRepayMentUtil.class);
	
	private static RepayMentServiceI repayMentServiceI = SpringContextHolder
			.getBean(RepayMentServiceI.class);//用户还款Service
	
 	private static TenderItemServiceI tenderItemServiceI = SpringContextHolder
			.getBean(TenderItemServiceI.class);//标的Service
 	
	private static UserTenderServiceI usertenderServiceI = SpringContextHolder
			.getBean(UserTenderServiceI.class);//投标记录Service
	
	private static DividedPaymentsServiceI dividedPaymentsServiceI = SpringContextHolder
			.getBean(DividedPaymentsServiceI.class);//标的分期还款计划Service
	
	private static UserAccountSafeInfoServiceI userAccountSafeInfoServiceI = SpringContextHolder
			.getBean(UserAccountSafeInfoServiceI.class);//用户账户安全信息Service
	
	private static InterestExpenseServiceI interestExpenseServiceI = SpringContextHolder
			.getBean(InterestExpenseServiceI.class);//标的利息管理费设置Service  
	
	private static InterestExpenseRecordServiceI interestExpenseRecordServiceI = SpringContextHolder
			.getBean(InterestExpenseRecordServiceI.class);//标的利息管理费记录Service  
	
	
	
	/**
	 * 
	* @Title: checkGenerateRepay 
	* @Description: TODO(判断投标记录中是否还有待审核的投标) 
	* @param @param tenderItemId 标的ID
	* @param @return  参数说明   
	* @return boolean    返回类型  返回false表示还有待审核的标  （不允许生成还款计划）
	* @author cjm
	* @throws
	 */
	public static boolean checkGenerateRepay(BigDecimal tenderItemId){
		boolean flag = false;
		if(tenderItemId != null){
			Map<String,Object> hashMap = new HashMap<String,Object>();
			hashMap.put("tenderid", tenderItemId);//标的号ID
			hashMap.put("tstatus", (short)1);//投标的状态 （0.初始，1.待审核，2.失败，3.撤销，4.已完成）
 			List<UserTender> userTenders = usertenderServiceI.findUserTenderRecord(hashMap);
 			if(userTenders.size() > 0){//还有待审核的投标  生成还款计划必须没有待审核的投标
 				return flag ;
 			}else{
 				flag = true;
 				return flag ;
 			}
		}
		return flag ;
	}


	
	/**
	 * 
	* @Title: getUsertenderAmount 
	* @Description: TODO(获取截标的投标总金额) 
	* @param @param tenderItemId 标的ID
	* @param @return  参数说明 
	* @return Double    返回类型 
	* @author cjm
	* @throws
	 */
	public static Double getUsertenderAmount(BigDecimal tenderItemId){
		Double Amount = 0.00;
		if(tenderItemId != null){
 			Map<String,Object> condition = new HashMap<String,Object>();
			condition.put("tenderid", tenderItemId);//标的号ID
			condition.put("tstatus", (short)4);//投标的状态 （0.初始，1.待审核，2.失败，3.撤销，4.已完成）
			condition.put("utproperty", (short)1);/** 投标属性（1原始投标，2债转投标） */
			List<UserTender> userTenders = usertenderServiceI.findUserTenderRecord(condition);
 			if(userTenders.size() > 0){
  				for(UserTender userTender : userTenders){
					Amount = userTender.getRealamount() 
							+ userTender.getVoucheramount() 
							+ Amount;//真金+类现金
 				}
			}
		}
		return Amount;
	}
	 
	/**
	 * @throws  
 	* @Title: AutoGenerateDividedPayments 
	* @Description: TODO(自动生成 标的分期还款计划 （借款人的还款计划表） ) 
	* @param   参数说明 tenderItemId 标的ID
	* @return boolean    返回类型  
	* 					 返回ture 生成还款计划成功  
	* 					 返回false 生成还款计划失败
	* @author cjm
	* @throws
	*/
	public synchronized  static boolean AutoGenerateDividedPayments(BigDecimal tenderItemId){
		boolean falg = false;
		if(tenderItemId == null){
			if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成 标的分期还款计划   标的ID为空");
			}
 			return falg;
		}
		
     	TenderItem  tenderItem = tenderItemServiceI.findTenderItemById(tenderItemId);//标的信息
    	if(tenderItem == null){
    		if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成 标的分期还款计划   标的对象为空 ,标的ID是："+tenderItemId.toString()+"");
			}
     		return falg;
    	}
    	
    	DividedPayments dividedPayments33 = new DividedPayments();
    	dividedPayments33.setTenderid(tenderItemId);
    	List<DividedPayments> dividedPayments34 = dividedPaymentsServiceI.findDividedPaymentss(dividedPayments33);
    	if(dividedPayments34.size() > 0){//已经生成过标的还款计划了
    		if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成 标的分期还款计划   已经生成过还款计划了 ,标的ID是："+tenderItemId.toString()+"");
			}
     		return falg;
    	}
    	
   		int    totalMonth       = tenderItem.getLoantime();//标的借款周期
  		String dayormonthStr    = tenderItem.getDayormonth();//天或月或年
  		double yearRate    	    = tenderItem.getTinterest();//标的利息(收益)
  		Short  repaymenttype    = tenderItem.getRepaymenttype();//还款类型（1及时，2冻结还款）
   		Short  repaymentproSrt  = tenderItem.getRepaymentpro();//标的还款方式01：一次还本付息02：等额本金03：等额本息04：按期付息到期还本99：其他
  		Date   Valuedate		= new Date();//截标日期
  		String Valuepoint      	= tenderItem.getValuepoint(); //起息日时间点
  	    Short  Valuerule        = tenderItem.getValuerule();//起息规则1.结标日当天,2.结标日次日,3.结标日固定时间之前,4.结标日固定时间之后
  	    Date   retdate  		= StringUtil.getValuedate(Valuedate, Valuepoint, Valuerule);//起息日
  	    
   	    if(Valuerule == null){
   	    	if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成标的分期还款计划失败,标的起息规则不能为空,标的ID是："+tenderItemId.toString()+"");
			}
    	    return falg;
  	    }
  	    
  	    if(repaymenttype == null){
  	    	if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成标的分期还款计划失败,标的还款类型不能为空,标的ID是："+tenderItemId.toString()+"");
			}
   	    	return falg;
  	    }
  	    
  	    double totalPrincipal   = getUsertenderAmount(tenderItemId);//标的金额
  	    if(totalPrincipal <= 0){
  	    	if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成标的分期还款计划失败,投标的金额不能为0,标的ID是："+tenderItemId.toString()+"");
			}
  	    	return falg;
  	    }
  	    
		tenderItem.setValuedate(Valuedate);//截标日期
  		tenderItemServiceI.update(tenderItem);
  		DecimalFormat df = new DecimalFormat("################0.00");
		boolean lasePeriodBoolean = false;//是否是最后一期
   		boolean dayorMonthBoolean = false;//还款周期是天时 还款类型只能一次性还本付息
 		double monthPrincipalDou  = 0.00; //每期还款金额
		double monthInterestDou   = 0.00; //每期还款利息
		double restprincipal      = 0.00;//剩余还款本金
		double currentpi 		  = 0.00;//还款本息（本金+利息）
		DividedPayments dividedPayments2 = null;
		Date repayday 			  = null;
		int scale 				  = 2;
		int countI 				  = 0;
		Short isaudit = (short) (repaymenttype == 1 ?  0 : 1);//是否审核
		if(dayormonthStr.equals("年")){
			totalMonth = totalMonth * 12;
		}else if(dayormonthStr.equals("天")){
			dayorMonthBoolean = true;
		}
		
		if(repaymentproSrt.equals((short)1)){//生成还款计划为一期
			dayorMonthBoolean = true;
		}
		
 		if(dayorMonthBoolean){//生成还款计划为一期
 			if(dayormonthStr.equals("天")){//借款周期是天时 
 				yearRate = yearRate / 365;//日利率
 				monthInterestDou = Double.parseDouble(df.format(totalPrincipal * yearRate * totalMonth));//借款总利息（计算公式 ： 借款本金 * 日利率 * 借款周期）
 				monthPrincipalDou = Double.parseDouble(df.format(totalPrincipal));//借款本金
 				currentpi  = Double.parseDouble(df.format(monthInterestDou +  monthPrincipalDou));//当期本息 (当期总的本+息)
 			}else{
  				monthInterestDou  = Double.parseDouble(df.format(OneTimeServicingUtil.getOneTimeInterestCount(totalPrincipal, totalMonth, yearRate, scale)))  ;//一次性还本付息总利息
 				monthPrincipalDou = Double.parseDouble(df.format(totalPrincipal));//借款本金
 				currentpi  = Double.parseDouble(df.format(monthInterestDou +  monthPrincipalDou));//当期本息 (当期总的本+息)
  			}
 			Map<String,Object> hashMap = new HashMap<String,Object>();
 			hashMap.put("tenderid", tenderItem.getId());
 			hashMap.put("periods", 1);
  		    dividedPayments2 = dividedPaymentsServiceI.findDividedPaymentsByConditions(hashMap);
  			if(dividedPayments2 == null){//防止重复添加
	   				/*************************标的分期还款计划开始***********************************/
 	  				DividedPayments dividedPayments = new DividedPayments();
	  				dividedPayments.setDporderno(StringUtil.getNo());//分期还款流水号
	  				dividedPayments.setTenderid(tenderItem.getId());//标号ID
	  				dividedPayments.setPeriods(1);//期数(第几期)
	  				dividedPayments.setRepayday(DateUtil.addMonth(retdate, 1));//还款日
	  				dividedPayments.setCurrentpi(currentpi);//当期本息 (当期总的本+息)
	  				dividedPayments.setCpprincipal(totalPrincipal);//当期本金
	  				dividedPayments.setCpinterest(monthInterestDou);//当期利息
	  				dividedPayments.setIscomplete((short)0);//是否还款完成1已完成还款0没有完成还款
	  				dividedPayments.setRemark("备注信息");//备注
	  				dividedPayments.setIsoverdue((short)0);//是否逾期1已结逾期0没有逾期
	  				dividedPayments.setIsaudit(isaudit);
	  				dividedPayments.setRestprincipal(restprincipal);//剩余本金
	  				dividedPayments.setFilestatus((short)1);/*批量还款文件处理状态（0上传失败，1上传成功）*/
	  				
	  				/*******************标的分期还款计划结束*****************************************/
	  				int count = 0;
 	  				count = dividedPaymentsServiceI.insertSelective(dividedPayments);
 	  				if(count > 0){//保存成功
 	  					countI ++;
 	  				}
  			} 
 		}else{
 	 			for(int i = 1 ;i <= totalMonth;i++){
  	 				 if(i == totalMonth){//最后一期
	 					lasePeriodBoolean = true;
	 				 }
	 				 if(repaymentproSrt.equals((short)2) && !dayorMonthBoolean){//等额本金
	 					if(lasePeriodBoolean){//还款最后一期
		 	  				double monthPrincipal = FixedBasisMortgageUtil.getLastMonthPrincipal(totalPrincipal, totalMonth, scale);//每月还款本金
		 			    	Map<Integer,BigDecimal> monthInterest = FixedBasisMortgageUtil.getMonthInterest(totalPrincipal, totalMonth, yearRate, scale);//每月还款利息
		 			    	monthPrincipalDou = monthPrincipal;
		 			    	monthInterestDou  = monthInterest.get(i).doubleValue();
		 	  			}else{
		 	  				double monthPrincipal = FixedBasisMortgageUtil.getMonthPrincipal(totalPrincipal, totalMonth, scale);//每月还款本金
		 			    	Map<Integer,BigDecimal> monthInterest = FixedBasisMortgageUtil.getMonthInterest(totalPrincipal, totalMonth, yearRate, scale);//每月还款利息
		 			    	monthPrincipalDou = monthPrincipal;
		 			    	monthInterestDou  = monthInterest.get(i).doubleValue();
		 	  			}
				    }else if(repaymentproSrt.equals((short)3) && !dayorMonthBoolean){//等额本息
				    	if(lasePeriodBoolean){//还款最后一期
				    		monthPrincipalDou = FixedPaymentMortgageUtil.getLastMonthPrincipal(totalPrincipal, yearRate, totalMonth, scale);//每月还款本金
				    		Map<Integer,BigDecimal> monthInterest =  FixedPaymentMortgageUtil.getMonthInterest(totalPrincipal, yearRate, totalMonth, scale);//每月还款利息
				    		monthInterestDou =  monthInterest.get(i).doubleValue();
				    	}else{
		 		    		Map<Integer,BigDecimal> monthPrincipal = FixedPaymentMortgageUtil.getMonthPrincipal(totalPrincipal, yearRate, totalMonth, scale);//每月还款本金
		 		    		Map<Integer,BigDecimal> monthInterest =  FixedPaymentMortgageUtil.getMonthInterest(totalPrincipal, yearRate, totalMonth, scale);//每月还款利息
		 		    		monthPrincipalDou = monthPrincipal.get(i).doubleValue();
		 		    		monthInterestDou =  monthInterest.get(i).doubleValue();
				    	}
				    }else if(repaymentproSrt.equals((short)4) || dayorMonthBoolean){//按期付息到期还本 
				    	if(lasePeriodBoolean){//还款最后一期
				    		  monthPrincipalDou = totalPrincipal;//还款总本金
			   		    	  monthInterestDou =  OneTimeServicingUtil.getMonthInterest(totalPrincipal, totalMonth, yearRate, scale);//每月还款利息
				    	}else{
				    		  monthPrincipalDou = 0.00;//每月还款本金
			   		    	  monthInterestDou = OneTimeServicingUtil.getMonthInterest(totalPrincipal, totalMonth, yearRate, scale);//每月还款利息
				    	}
				    } 
	 				
	 				monthPrincipalDou = Double.parseDouble(df.format(monthPrincipalDou));//还款本金
	 				monthInterestDou  = Double.parseDouble(df.format(monthInterestDou));//还款利息
	 				
	 				if(i == 1){
	 					repayday = DateUtil.addMonth(retdate, 1);//还款日期
	 					restprincipal = Double.parseDouble(df.format( totalPrincipal - monthPrincipalDou));//剩余还款本金
			  		}else{
			  			repayday = DateUtil.addMonth(DateUtil.addMonth(retdate, 1), i-1);//还款日期
			  			Map<String,Object> maps3 = new HashMap<String,Object>();
			  			maps3.put("tenderid", tenderItem.getId());//标的ID
			  			maps3.put("periods", i-1);//分期还款计划期数
			  			DividedPayments dividedPayments3 = dividedPaymentsServiceI.findDividedPaymentsByConditions(maps3);//分期还款计划信息
			  		    Assert.notNull(dividedPayments3, "'dividedPayments3' 不能为null");
			  			restprincipal = Double.parseDouble(df.format(dividedPayments3.getRestprincipal() - monthPrincipalDou));//每期剩余还款本金
			  		}
	 				
	 				currentpi  = Double.parseDouble(df.format(monthInterestDou +  monthPrincipalDou));//当期本息 (当期总的本+息)
 	 				Map<String,Object> maps2 = new HashMap<String,Object>();
	 				maps2.put("tenderid", tenderItem.getId());//标的ID
	 				maps2.put("periods", i);//分期还款计划期数
	 				dividedPayments2 = dividedPaymentsServiceI.findDividedPaymentsByConditions(maps2);//分期还款计划信息
	 	  			if(dividedPayments2 == null){//防止重复添加
 	 	  				/*************************标的分期还款计划开始***********************************/
	 	  				DividedPayments dividedPayments = new DividedPayments();
	 	  				dividedPayments.setDporderno(StringUtil.getNo());//分期还款流水号
	 	  				dividedPayments.setTenderid(tenderItem.getId());//标号ID
	 	  				dividedPayments.setPeriods(i);//期数(第几期)
	 	  				dividedPayments.setRepayday(repayday);//还款日
	 	  				dividedPayments.setCurrentpi(currentpi);//当期本息 (当期总的本+息)
	 	  				dividedPayments.setCpprincipal(monthPrincipalDou);//当期本金
	 	  				dividedPayments.setCpinterest(monthInterestDou);//当期利息
	 	  				dividedPayments.setIscomplete((short)0);//是否还款完成1已完成还款0没有完成还款
	 	  				dividedPayments.setRemark("备注信息");//备注
	 	  				dividedPayments.setIsoverdue((short)0);//是否逾期1已结逾期0没有逾期
	 	  				dividedPayments.setIsaudit(isaudit);//是否审核 0否 1是  2 已审核
	 	  				dividedPayments.setRestprincipal(restprincipal);//剩余本金
	 	  				/*******************标的分期还款计划结束*****************************************/
	 	  				int count = 0;
	 	  				count = dividedPaymentsServiceI.insertSelective(dividedPayments);
	 	  				if(count > 0){//保存成功
	 	  					countI ++;
	 	  				}
 	 	  			}
	 				
				}
		}
 		
  		if(dayorMonthBoolean){//只有一期
 			if(countI == 1){//自动生成成功
 				falg = true;
 			} 
  		}else{
  			if(countI == totalMonth){//自动生成成功
  				falg = true;
 			} 
		}
 		return falg;
  	}
	  
	/**
	 * 
	* @Title: AutoGenerateRepayMents 
	* @Description: TODO(自动生成投资人的具体还款计划) 
	* @param @param tenderItemId  参数说明  标的ID
	* @return void    返回类型 Map<String,Object> 
	* 				 key值： boolean 为true表示生成还款计划成功
	* 					   message 错误提示
	* @author cjm
	* @throws
	* 
	* 20170627  需求变更  删除利息管理费生成记录代码  cjm
	* 
	 */
 	public synchronized static Map<String,Object> AutoGenerateRepayMents(BigDecimal tenderItemId){
		Map<String,Object>  hashMapResult = new HashMap<String,Object>();
  		if(tenderItemId == null){
  			hashMapResult.put("boolean", false);
  			hashMapResult.put("message", "标的ID为null");
  			if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成 投资人的具体还款计划   标的ID不能为空");
			}
  			return hashMapResult;
  		}
  		
		TenderItem tenderItem  = tenderItemServiceI.findTenderItemById(tenderItemId);
 		if(tenderItem == null){
 			hashMapResult.put("boolean", false);
  			hashMapResult.put("message", "'tenderItem' 标的对象为null");
  			if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成 投资人的具体还款计划   标的对象不能为空");
			}
 			return hashMapResult;
 		}
 		
  		int    totalMonth   		    						= tenderItem.getLoantime();//标的借款周期
		String dayormonthStr    								= tenderItem.getDayormonth();//天或月或年
		Double yearRate    										= tenderItem.getTinterest();//标的利息(收益)
		Date   Valuedate										= tenderItem.getValuedate();//截标日期
		if(Valuedate == null){
  			hashMapResult.put("boolean", false);
  			hashMapResult.put("message", "'Valuedate'标的截标日期为null");
  			if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成 投资人的具体还款计划   标的截标日期不能为空");
			}
  			return hashMapResult;
  		}
		
  		String Valuepoint      									= tenderItem.getValuepoint(); //起息日时间点
  		Short repayMentType										= tenderItem.getRepaymenttype();//还款类型（1及时，2冻结还款）
  		if(repayMentType == null){
  			hashMapResult.put("boolean", false);
  			hashMapResult.put("message", "'repayMentType'标的还款类型为null");
  			if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成 投资人的具体还款计划   标的还款类型不能为空");
			}
  			return hashMapResult;
  		}
  		
  	    Short  Valuerule        								= tenderItem.getValuerule();//起息规则1.结标日当天,2.结标日次日,3.结标日固定时间之前,4.结标日固定时间之后
  	    if(Valuerule == null){
			hashMapResult.put("boolean", false);
			hashMapResult.put("message", "'Valuerule'标的起息规则为null");
			if(repayLogger.isDebugEnabled()){
				repayLogger.debug("生成 投资人的具体还款计划   标的起息规则不能为空");
			}
			return hashMapResult;
		}
  	    
  	    Date   retdate  										= StringUtil.getValuedate(Valuedate, Valuepoint, Valuerule);//起息日
 		Short repayMentIsAudit = (short)(repayMentType == 1 ? 0 : 1);//是否审核 0否    1是
		Short  repaymentproSrt  			 					= tenderItem.getRepaymentpro();//标的还款方式01：一次还本付息02：等额本金03：等额本息04：按期付息到期还本99：其他
 		DecimalFormat df 					 					= new DecimalFormat("################0.00");//格式化金额rptotalintCount
 		UserInterestRateCoupon  userInterestRateCoupon 			= null;//用户使用加息券对象
 		Double rpinterestCount									= 0.00;//还款总利息(不包括加息券利息)
		Double rptotalintCount									= 0.00;//还款本息总和(真本金+类现金+真本金利息+假现金利息+类现金利息+加息券利息)
		Double interestCount									= 0.00;//还款利息总和(真本金利息+假现金利息+类现金利息+加息券利息)
 		Double rptotalamountCount								= 0.00;//还款本金总和(本金+ 类现金)
 		Double icrateCount		   								= 0.00;//加息券利率总和
		Double rintfeeCount										= 0.00;//加息劵利息总和
		Double rinterestCount									= 0.00;//真现金的利息总和
		Double rlvoucherintCount								= 0.00;//假现金的利息总和
		Double rvoucherintCount									= 0.00;//类现金的利息总和
 		Double ramount											= 0.00;//当期还款真现金
		Double rlvoucher										= 0.00;//当期还款假现金
		Double rvoucher											= 0.00;//当期还款类现金
		Double rptotalamount									= 0.00;//当期还款总金额(真本金+类现金)	
   		Double rinterest										= 0.00;//当期还款真现金的利息
		Double rlvoucherint										= 0.00;//当期还款假现金的利息
		Double rvoucherint										= 0.00;//当期还款类现金的利息
		Double rintfee											= 0.00;//当期加息卷的利息
 	    Double restprincipal									= 0.00;//剩余本金
		Double restvoucher										= 0.00;//剩余类现金
		Double restlvoucher										= 0.00;//剩余假现金
 		Double restamountintprofit								= 0.00;//剩余本金产生的利息 （原收益+剩余加息劵收益）*本金
		Double restvoucherintprofit								= 0.00;//剩余类现金产生的利息 （原收益+加息劵收益）*剩余类现金
		Double restlvoucherintprofit							= 0.00;//剩余假现金产生的利息 （原收益+加息劵收益）*剩余假现金
		Double restintprofit									= 0.00;//剩余加息卷收益的利息
		boolean isClassEnvelopeBoolean							= false;//是否使用了类现金 false 没有使用
		boolean isFalseEnvelopeBoolean							= false;//是否使用了假现金 false 没有使用
		boolean isIcrateBoolean									= false;//是否使用了加息券 false 没有使用
 		boolean lasePeriodBoolean    		 					= false;//是否是最后一期
		boolean dayorMonthBoolean 		     					= false;//还款周期是天时 还款类型只能一次性还本付息
		Double monthPrincipalDou  			 					= 0.00; //每期还款本金金额
		Double monthInterestDou   			 					= 0.00; //每期还款本金利息
 		BigDecimal outaccountid 	 		 					= null;//借款用户ID
		BigDecimal inaccountid  			 					= null;//投资用户ID
		BigDecimal proxyaccountid 	 		 					= null;//代还款人ID
		RepayMent repayMent2		 		 					= null;//防止重复添加
		UserAccountSafeInfo outInfo  							= null;//投资人账号安全信息对象
 		String utorderno 					 					= "";//投标订单号 根据具体投标记录对应还款
		String rorderno 					 					= "";//还款流水号
		Date repayday 						 					= null;//还款日期
		int scale 							 					= 2;//小数点精确位数
 		Integer globalDay					 					= 365;//全局表天数  
		Map<String,Object> condition = new HashMap<String,Object>();
		condition.put("tenderid", tenderItem.getId());//标的号ID
		condition.put("tstatus", (short)4);//投标的状态 （0.初始，1.待审核，2.失败，3.撤销，4.已完成）
		condition.put("utproperty", (short)1);/** 投标属性（1原始投标，2债转投标） */
		List<UserTender> userTenders = usertenderServiceI.findUserTenderRecord(condition);
		List<UserTenderPlusLink> userTenderPlusLinks = null;//标的增益关联集合
		Double totalPrincipal       							= 0.00;//借款金额(真本金+假现金+类现金）
		Double realamount       								= 0.00;//真本金
		Double likevoucheramount       							= 0.00;//假现金
		Double voucheramount       								= 0.00;//类现金
		int count = 0;
 		if(userTenders.size() > 0){//有投标成功的记录
			UserTenderPlusLinkServiceI 		userTenderPlusLinkServiceI 		= SpringContextHolder.getBean(UserTenderPlusLinkServiceI.class);//投标增益使用关联Service
 			UserInterestRateCouponServiceI  userInterestRateCouponServiceI  = SpringContextHolder.getBean(UserInterestRateCouponServiceI.class);//用户使用券Service
			for(UserTender userTender : userTenders){
				  if(userTender.getValuedate() == null){
					  userTender.setValuedate(retdate);//起息日
					  usertenderServiceI.updateValueDateByTenderId(userTender);
				  }
				  
				  if(userTender.getAuthcode() == null){
					  if(repayLogger.isDebugEnabled()){
							repayLogger.debug("生成 投资人的具体还款计划   投标记录的投标申请授权码不能为空,投标记录的投标订单号是："+userTender.getOrderno());
					  }
					  hashMapResult.put("boolean", false);
					  hashMapResult.put("message", "生成 投资人的具体还款计划   投标记录的投标申请授权码不能为空,投标记录的投标订单号是："+userTender.getOrderno());
  					  break;
				  }
 				  userInterestRateCoupon 									= null;//用户使用加息券对象
 				  rpinterestCount											= 0.00;//还款总利息(不包括加息券利息)
				  rptotalintCount											= 0.00;//还款本息总和(真本金+类现金+真本金利息+假现金利息+类现金利息+加息券利息)
				  rptotalamountCount										= 0.00;//还款本金总和(投标金额-假现金)
				  interestCount												= 0.00;//还款利息总和(真本金利息+假现金利息+类现金利息+加息券利息)
				  icrateCount		   										= 0.00;//加息券利率总和
				  rintfeeCount												= 0.00;//加息劵利息总和
				  rinterestCount											= 0.00;//真现金的利息总和
				  rlvoucherintCount											= 0.00;//假现金的利息总和
				  rvoucherintCount											= 0.00;//类现金的利息总和
		 		  ramount													= 0.00;//当期还款真现金
				  rlvoucher													= 0.00;//当期还款假现金
				  rvoucher													= 0.00;//当期还款类现金
				  rptotalamount												= 0.00;//当期还款总金额		
 		 		  rinterest													= 0.00;//当期还款真现金的利息
				  rlvoucherint												= 0.00;//当期还款假现金的利息
				  rvoucherint												= 0.00;//当期还款类现金的利息
				  rintfee													= 0.00;//当期加息卷的利息
		 	      restprincipal												= 0.00;//剩余本金
				  restvoucher												= 0.00;//剩余类现金
				  restlvoucher												= 0.00;//剩余假现金
		 		  restamountintprofit										= 0.00;//剩余本金产生的利息 （原收益+剩余加息劵收益）*本金
				  restvoucherintprofit										= 0.00;//剩余类现金产生的利息 （原收益+加息劵收益）*剩余类现金
				  restlvoucherintprofit										= 0.00;//剩余假现金产生的利息 （原收益+加息劵收益）*剩余假现金
				  restintprofit												= 0.00;//剩余加息卷收益的利息
				  isClassEnvelopeBoolean									= false;//是否使用了类现金 false 没有使用
				  isFalseEnvelopeBoolean									= false;//是否使用了假现金 false 没有使用
				  isIcrateBoolean											= false;//是否使用了加息券 false 没有使用	   	 
 				  userTenderPlusLinks  										= userTenderPlusLinkServiceI.findUserTenderPlusLinkByUtId(userTender.getId());//查找标的增益关联信息;
 				  if(userTenderPlusLinks.size() > 0){//使用了增益手段
					   for(UserTenderPlusLink userTenderPlusLink : userTenderPlusLinks){
						    if(userTenderPlusLink.getIcid() != null){//使用了加息券
						    	userInterestRateCoupon = userInterestRateCouponServiceI.findUserInterestRateCouponById(userTenderPlusLink.getIcid());
 						    	if(userInterestRateCoupon == null){
									hashMapResult.put("boolean", false);
									hashMapResult.put("message", "'userInterestRateCoupon'加息券对象为null");
									if(repayLogger.isDebugEnabled()){
										repayLogger.debug("生成 投资人的具体还款计划   加息券对象不能为空");
									}
									return hashMapResult;
								}
 						    	
 						    	if(userInterestRateCoupon.getIcrate() == null){
									hashMapResult.put("boolean", false);
									hashMapResult.put("message", "'userInterestRateCoupon.getIcrate()'加息券利率为null");
									if(repayLogger.isDebugEnabled()){
										repayLogger.debug("生成 投资人的具体还款计划   加息券对象的加息券利率不能为空");
									}
									return hashMapResult;
								}
 						    	
 						    	icrateCount += userInterestRateCoupon.getIcrate();//加息券利率
						    	isIcrateBoolean = true;
						    }
 					   }
				  }//使用增益结束
 	   			    lasePeriodBoolean 				= false;//是否最后一期
		   			rorderno 						= StringUtil.getNo();//还款流水号
		   			totalPrincipal  				= userTender.getAmount();//借款金额(真本金+假现金+类现金）
		   			realamount       				= userTender.getRealamount();//真本金
		   			voucheramount       			= userTender.getVoucheramount();//类现金
		   			likevoucheramount       		= userTender.getLikevoucheramount();//假现金
		  			outaccountid    				= userTender.getInaccountid();//借款用户ID
		  			inaccountid    				    = userTender.getOutaccountid();//投资用户ID
		  			proxyaccountid  				= tenderItem.getCompensatorymaid(); //代还款人ID
		  			utorderno       				= userTender.getOrderno();//投标订单号 根据具体投标记录对应还款
		  			if(inaccountid == null){
						hashMapResult.put("boolean", false);
						hashMapResult.put("message", "'inaccountid' 投资用户ID为null");
						if(repayLogger.isDebugEnabled()){
							repayLogger.debug("生成 投资人的具体还款计划   投标记录的投资用户ID不能为空");
						}
						return hashMapResult;
					}
		  			
		  			if(outaccountid == null){
						hashMapResult.put("boolean", false);
						hashMapResult.put("message", "'outaccountid' 借款用户ID为null");
						if(repayLogger.isDebugEnabled()){
							repayLogger.debug("生成 投资人的具体还款计划   投标记录的借款用户ID不能为空");
						}
						return hashMapResult;
					}
		  			
		  			if(utorderno == null){
						hashMapResult.put("boolean", false);
						hashMapResult.put("message", "'utorderno' 投标订单号为null");
						if(repayLogger.isDebugEnabled()){
							repayLogger.debug("生成 投资人的具体还款计划   投标记录的投标订单号不能为空");
						}
						return hashMapResult;
					}
		  			
		  			if(rorderno == null){
						hashMapResult.put("boolean", false);
						hashMapResult.put("message", "'rorderno' 还款流水号为null");
						if(repayLogger.isDebugEnabled()){
							repayLogger.debug("生成 投资人的具体还款计划   投标记录的还款流水号不能为空");
						}
						return hashMapResult;
					}
		  			 
 		  			outInfo = userAccountSafeInfoServiceI.selectByBaseId(outaccountid);//投资人账号安全信息对象
 		  			if(totalPrincipal == null){
						hashMapResult.put("boolean", false);
						hashMapResult.put("message", "'totalPrincipal' 借款金额为null");
						if(repayLogger.isDebugEnabled()){
							repayLogger.debug("生成 投资人的具体还款计划   投标记录的借款金额不能为空");
						}
						return hashMapResult;
					}
 		  			
 		  			if(outInfo == null){
						hashMapResult.put("boolean", false);
						hashMapResult.put("message", "'outInfo' 投资人账号安全信息对象为null");
						if(repayLogger.isDebugEnabled()){
							repayLogger.debug("生成 投资人的具体还款计划   投标记录的投资人账号安全信息对象不能为空");
						}
						return hashMapResult;
					}
 		  			
 		  			String ugrade = outInfo.getUgrade().toString();//投资人会员等级
 		  			if(ugrade == null){
						hashMapResult.put("boolean", false);
						hashMapResult.put("message", "'ugrade' 投资人账号安全信息对象会员等级为null");
						if(repayLogger.isDebugEnabled()){
							repayLogger.debug("生成 投资人的具体还款计划   投资人账号安全信息对象会员等级为null");
						}
						return hashMapResult;
					}
 		  			
		   			if(dayormonthStr.equals("年")){
		  				totalMonth = tenderItem.getLoantime();
		  				totalMonth = totalMonth * 12;
		  			}else if(dayormonthStr.equals("天")){
		  				dayorMonthBoolean = true;
		  			}
		  			
		  			if(repaymentproSrt.equals((short)1)){//借款类型是一次性还本付息时 生成还款计划为一期
		  				dayorMonthBoolean = true;
		  			}
		  			
		  			if(voucheramount > 0){//使用了类现金
		  				isClassEnvelopeBoolean = true;
		  			}
		  			
		  			if(likevoucheramount > 0){
		  				isFalseEnvelopeBoolean = true;
		  			}
		  			
   				if(dayorMonthBoolean){//生成还款计划为一期
 		 			if(dayormonthStr.equals("天")){//借款周期是天时 
 		 				yearRate = yearRate / globalDay;//日利率
		 				monthInterestDou 			= Double.valueOf(df.format(realamount * yearRate * totalMonth));//借款本金利息（计算公式 ： 借款本金 * 日利率 * 借款周期）
		 				monthPrincipalDou 			= Double.valueOf(df.format(realamount));//借款本金
		 				
 		 				if(isIcrateBoolean){//使用了加息券 只对本金加息
		 					yearRate 				= icrateCount / globalDay;//日利率(（加息券利率 / 一年总天数)
		 					rintfeeCount 			= Double.valueOf(df.format(realamount * yearRate * totalMonth));//加息卷收益总和
		 				}	
 		 				
 		 				if(isClassEnvelopeBoolean){//使用了类现金
 	  		 				rvoucherintCount 	   = Double.valueOf(df.format(voucheramount * yearRate * totalMonth));//类现金产生的利息 
 	  		 				rvoucher			   = Double.valueOf(df.format(voucheramount));//还款类现金  
 			 			}
 	  		 			
 			 			if(isFalseEnvelopeBoolean){//使用了假现金
 			 				rlvoucherintCount 	  = Double.valueOf(df.format(likevoucheramount * yearRate * totalMonth));//当期假现金产生的利息 
  			 			}
 			 			
		 			}else{
		  				monthInterestDou  			= Double.valueOf(df.format(OneTimeServicingUtil.getOneTimeInterestCount(realamount, totalMonth, yearRate, scale)));//一次性还本付息总利息
		 				monthPrincipalDou 			= Double.valueOf(df.format(realamount));//借款本金
		 				if(isIcrateBoolean){//使用了加息券
		 					rintfeeCount 			= Double.valueOf(df.format(OneTimeServicingUtil.getOneTimeInterestCount(realamount, totalMonth, icrateCount, scale)));//加息卷收益总和
		 				}
		 				
		 				if(isClassEnvelopeBoolean){//使用了类现金
		 					rvoucherintCount 		= Double.valueOf(df.format(OneTimeServicingUtil.getOneTimeInterestCount(voucheramount, totalMonth, yearRate, scale)));//类现金产生的利息 
	  		 				rvoucher			    = Double.valueOf(df.format(voucheramount));//还款类现金 
			 			}
	  		 			
			 			if(isFalseEnvelopeBoolean){//使用了假现金
			 				rlvoucherintCount 			= Double.valueOf(df.format(OneTimeServicingUtil.getOneTimeInterestCount(likevoucheramount, totalMonth, yearRate, scale)));//当期假现金产生的利息 
 			 			}
		  			}
 		 			rptotalamountCount				= Double.valueOf(df.format(monthPrincipalDou + rvoucher));//还款总本金(真本金+类现金)
  		 			interestCount					= Double.valueOf(df.format(rlvoucherintCount + rvoucherintCount + rintfeeCount + monthInterestDou ));//还款利息总和(真本金利息+假现金利息+类现金利息+加息券利息)
 		 			rptotalintCount  				= Double.valueOf(df.format(rptotalamountCount + interestCount));//总本息 (还款的总本息=真本金+类现金+真本金利息+假现金利息+类现金利息+加息券利息)
   		 			Map<String,Object> hashMap = new HashMap<String,Object>();
		 			hashMap.put("tenderid", tenderItem.getId());//标的ID
		 			hashMap.put("utorderno", utorderno);//投标订单号 根据具体投标记录对应还款
	 	 			hashMap.put("periods", 1);//期数
	 	 			hashMap.put("planstatus", (short)1);//还款计划状态(1有效，2无效) 
 		 			repayMent2 = repayMentServiceI.findRepayMentByConditions(hashMap);
		  			if(repayMent2 == null){//防止重复添加
 		 	  				/*************************标的分期还款计划开始***********************************/
			 	  	  		RepayMent repayMent = new RepayMent();
			 	  	  		repayMent.setRorderno(rorderno);				//还款流水号
	 		 	  	  		repayMent.setOutaccountid(outaccountid);		//借款用户ID
			 	  	  		repayMent.setInaccountid(inaccountid);			//投资用户ID
			 	  	  		if(proxyaccountid != null){//防止空指针异常
 			 	  	  			repayMent.setProxyaccountid(proxyaccountid);	//代还款人ID
			 	  	  		}
	 		 	  	  		repayMent.setUtorderno(utorderno);				//投标订单号 根据具体投标记录对应还款
			 	  	  		repayMent.setTenderid(tenderItem.getId());		//标号ID
			 	  	  		repayMent.setPeriods(1);						//还款期数（第几期）
			 	  	   		repayMent.setIsdarepay((short)0);				//是否债转还款(投标记录发生过债转 1是0否)
			 	  	  		repayMent.setRmode((short)0);					//还款模式（0初始  1人工，2系统，3线下 ）
			 	  	  		repayMent.setRptotalamount(rptotalamountCount);	//还款总金额(真本金+类现金)
			 	  	  		repayMent.setRptotalint(interestCount);			//当期还款总利息(当期真现金利息+当期假现金利息+当期类现金利息+当期加息券利息)
 			 	  	  		repayMent.setRprincipalint(rptotalintCount);	//当期还款总本息（总本金+总利息） 
			 	  	  		repayMent.setRamount(monthPrincipalDou);		//当期还款金额（当期本金）
			 	  	  		repayMent.setRvoucher(rvoucher);				//当期还款类现金
			 	  	  		repayMent.setRlvoucher(likevoucheramount);		//当期还款假现金
			 	  	  		repayMent.setOverdueamount(0.00);				//当期逾期滞纳金额
			 	  	  		repayMent.setRinterest(monthInterestDou);		//当期还款本金利息（当期本金利息）
			 	  	  		repayMent.setRlvoucherint(rlvoucherintCount);	//当期还款假现金的利息
			 	  	  		repayMent.setRvoucherint(rvoucherintCount);		//当期还款类现金的利息
			 	  	  		repayMent.setRintfee(rintfeeCount);				//当期还款加息劵的利息
  			 	  	  		repayMent.setRestprincipal(0.00);				//剩余本金
			 	  	  		repayMent.setRestvoucher(0.00);					//剩余类现金
			 	  	  		repayMent.setRestlvoucher(0.00);				//剩余假现金
			 	  	  		repayMent.setRestocamount(0.00);				//剩余滞纳金 剩余本金产生的滞纳金
			 	  	  		repayMent.setVrestocamount(0.00);				//剩余类现金滞纳金 剩余类现金产生的滞纳金
			 	  	  		repayMent.setRestamountintprofit(0.00);			//剩余本金产生的利息 （原收益+剩余加息劵收益）     *  本金
			 	  	  		repayMent.setRestvoucherintprofit(0.00);		//剩余类现金产生的利息 （原收益+加息劵收益）    *  剩余类现金
			 	  	  		repayMent.setRestlvoucherintprofit(0.00);		//剩余假现金产生的利息 （原收益+加息劵收益）*  剩余假现金
			 	  	  		repayMent.setRestintprofit(0.00);				//剩余加息卷收益
			 	  	  		repayMent.setDisableocamount(0.00);				//失效滞纳金 失效本金产生的滞纳金
			 	  	  		repayMent.setDisablevoucher(0.00);				//失效类现金
			 	  	  		repayMent.setDisablevoucherint(0.00);			//失效类现金利息
 			 	  	  		repayMent.setDisablelvoucher(0.00);				//失效假现金
			 	  	  		repayMent.setDisablevocamount(0.00);			//失效类现金滞纳金 失效类现金产生的滞纳金
			 	  	  		repayMent.setDisableintprofit(0.00);			//失效加息卷收益
			 	  	  		repayMent.setTransferprincipal(0.00);			//已转让本金
   			 	  	  		repayMent.setBpenalty(0.00);					//提前还款欠收利息 提前还款
			 	  	  		repayMent.setOverdueamount(0.00);				//逾期滞纳金额 注意是否有代偿
			 	  	  		repayMent.setInterestexpense(0.00);	//投标利息的管理费 投资人—》平台
			 	  	  		repayMent.setIsproxyrepay((short)0);			//是否代偿（1是，0否）
			 	  	  		repayMent.setFee(0.00);				//还款总利息费 还款金额利息+提前还款欠收利息+逾期滞纳金额
	  		 	  	  		repayMent.setRepaystatus((short)1);				//1待还款,2审核中,3待处理,4处理中,5已还款
	  		 	  	     	repayMent.setIsaudit(repayMentIsAudit);			//是否审核  0否 1是 
			 	  	  		repayMent.setIsblending((short)0);				//是否系统勾兑（0未勾兑，1已勾兑）
			 	  	  		repayMent.setRtime(DateUtil.addMonth(retdate, 1));//还款时间
			 	  	  		repayMent.setAddtime(new Date());  				//制表时间
			 	  	  		repayMent.setIsmanblending((short)0);			//是否人工勾兑（0未勾兑，1已勾兑）
			 	  	   		repayMent.setPaycompany(StringUtil.BANKNAME);	//托管通道公司（汇付天下）
			 	  	   		repayMent.setPlanstatus((short)1);				//还款计划状态(1有效，2无效)
			 	  	   		repayMent.setIsoverdue((short)0);				//是否逾期 0否，1是
			 	  	   		repayMent.setIsahead((short)0);				    //是否提前（0否，1是）
 			 	  	   		repayMent.setAuthcode(userTender.getAuthcode());   				//投标申请授权码
			 	  	 		/*******************标的分期还款计划结束*****************************************/
			 	  	   		int resCount = 0;
			 	  	   		resCount = repayMentServiceI.insertSelective(repayMent);
			 	  	   		if(resCount > 0){
			 	  	   			count ++;
			 	  	   		}
 		  			} 
 		 		}
				else{//多期还款计划
 
  						if(repaymentproSrt.equals((short)2) && !dayorMonthBoolean){//等额本金
 							rinterestCount							= FixedBasisMortgageUtil.getInterestCount(realamount, totalMonth, yearRate, scale);//还款真现金总利息
							 
							if(isFalseEnvelopeBoolean){//使用了假现金
 								rlvoucherintCount					= FixedBasisMortgageUtil.getInterestCount(likevoucheramount, totalMonth, yearRate, scale);//还款假现金总利息
							}
							
							if(isClassEnvelopeBoolean){//使用了类现金
 								rvoucherintCount					= FixedBasisMortgageUtil.getInterestCount(voucheramount, totalMonth, yearRate, scale);//还款类现金总利息
							}
							
							if(isIcrateBoolean){//使用了加息券icrateCount
								rintfeeCount						= FixedBasisMortgageUtil.getInterestCount(realamount, totalMonth, icrateCount, scale);//加息券利息总和
 							}
							
					    }else if(repaymentproSrt.equals((short)3) && !dayorMonthBoolean){//等额本息
 					    	rinterestCount							= FixedPaymentMortgageUtil.getMonthlyPayInterestCount(realamount, yearRate, totalMonth, scale);//还款真现金总利息	
					    
					    	if(isFalseEnvelopeBoolean){//使用了假现金
 					    		rlvoucherintCount					= FixedPaymentMortgageUtil.getMonthlyPayInterestCount(likevoucheramount, yearRate, totalMonth, scale);//还款假现金总利息
					    	}
					    	
					    	if(isClassEnvelopeBoolean){//使用了类现金
 					    		rvoucherintCount					= FixedPaymentMortgageUtil.getMonthlyPayInterestCount(voucheramount, yearRate, totalMonth, scale);//还款类现金总利息
					    	}
					    	
							if(isIcrateBoolean){//使用了加息券icrateCount
								rintfeeCount					    = FixedPaymentMortgageUtil.getMonthlyPayInterestCount(realamount,icrateCount, totalMonth,  scale);//加息券利息总和
 							}
							
 					    }else if(repaymentproSrt.equals((short)4) || dayorMonthBoolean){//按期付息到期还本 
 					    	rinterestCount							= OneTimeServicingUtil.getInterestCount(realamount, totalMonth, yearRate, scale);//还款真现金总利息
					    
					    	if(isFalseEnvelopeBoolean){//使用了假现金
 					    		rlvoucherintCount					= OneTimeServicingUtil.getInterestCount(likevoucheramount, totalMonth, yearRate, scale);//还款假现金总利息
					    	}
					    	if(isClassEnvelopeBoolean){//使用了类现金
 					    		rvoucherintCount					= OneTimeServicingUtil.getInterestCount(voucheramount, totalMonth, yearRate, scale);//还款类现金总利息
					    	}
							if(isIcrateBoolean){//使用了加息券
								rintfeeCount						= OneTimeServicingUtil.getInterestCount(realamount, totalMonth, icrateCount, scale);//加息券利息总和
							}
 					    }
		 	 			for(int i = 1 ;i <= totalMonth;i++){
		  	 				 if(i == totalMonth){//最后一期 
			 					lasePeriodBoolean 							= true;
			 				 }
		  	 				 
			 				 if(repaymentproSrt.equals((short)2) && !dayorMonthBoolean){//等额本金
 			 					 Map<Integer,BigDecimal> rinterestMap 		= FixedBasisMortgageUtil.getMonthInterest(realamount, totalMonth, yearRate, scale);//真现金每月还款利息
			 					 rinterest  								= rinterestMap.get(i).doubleValue();//真现金每月还款利息
			 					 
			 					 if(isFalseEnvelopeBoolean){//使用了假现金
 			 						 Map<Integer,BigDecimal> rlvoucherintMap 	= FixedBasisMortgageUtil.getMonthInterest(likevoucheramount, totalMonth, yearRate, scale);//假现金每月还款利息
			 						 rlvoucherint  								= rlvoucherintMap.get(i).doubleValue();//假现金每月还款利息
			 					 }
			 					 
			 					 if(isClassEnvelopeBoolean){//使用了类现金
 			 						 Map<Integer,BigDecimal> rvoucherintMap 	= FixedBasisMortgageUtil.getMonthInterest(voucheramount, totalMonth, yearRate, scale);//类现金每月还款利息
			 						 rvoucherint  								= rvoucherintMap.get(i).doubleValue();//类现金每月还款利息
			 					 }
			 					 
 			 					if(isIcrateBoolean){//使用了加息券
			 						 Map<Integer,BigDecimal>  rintfeeMap    = FixedBasisMortgageUtil.getMonthInterest(realamount, totalMonth, icrateCount, scale);//每月还款加息券利息
			 						 rintfee								= rintfeeMap.get(i).doubleValue();//每月还款加息券利息
			 					}
 			 					
			 					if(lasePeriodBoolean){//还款最后一期
 				 	  				ramount 								= FixedBasisMortgageUtil.getLastMonthPrincipal(realamount, totalMonth, scale);//每月还款真本金
				 	  				
				 	  				if(isFalseEnvelopeBoolean){//使用了假现金
 				 	  					rlvoucher 							= FixedBasisMortgageUtil.getLastMonthPrincipal(likevoucheramount, totalMonth, scale);//每月还款假现金
				 	  				}
				 	  				
				 	  				if(isClassEnvelopeBoolean){//使用了类现金
 				 	  					rvoucher 							= FixedBasisMortgageUtil.getLastMonthPrincipal(voucheramount, totalMonth, scale);//每月还款类现金金
				 	  				}
				 	  				
  				 	  			}else{
  			 			    	    ramount 								= FixedBasisMortgageUtil.getMonthPrincipal(realamount, totalMonth, scale);//每月还款真本金
				 	  				if(isFalseEnvelopeBoolean){//使用了假现金
				 	  					rlvoucher 							= FixedBasisMortgageUtil.getMonthPrincipal(likevoucheramount, totalMonth, scale);//每月还款假现金
				 	  				}
				 	  				
				 	  				if(isClassEnvelopeBoolean){//使用了类现金
				 	  					rvoucher 							= FixedBasisMortgageUtil.getMonthPrincipal(voucheramount, totalMonth, scale);//每月还款类现金金
				 	  				}
 				 	  			}
			 					
						    }else if(repaymentproSrt.equals((short)3) && !dayorMonthBoolean){//等额本息
  		 						   Map<Integer,BigDecimal> rinterestMap 	= FixedPaymentMortgageUtil.getMonthInterest(realamount, yearRate,totalMonth,scale);//真现金每月还款利息
		 						   rinterest  								= rinterestMap.get(i).doubleValue();//真现金每月还款利息
 			 					   if(isFalseEnvelopeBoolean){//使用了假现金
 			 						   Map<Integer,BigDecimal> rlvoucherintMap 	= FixedPaymentMortgageUtil.getMonthInterest(likevoucheramount, yearRate,totalMonth,scale);//假现金每月还款利息
			 						   rlvoucherint  							= rlvoucherintMap.get(i).doubleValue();//假现金每月还款利息
			 					   }
 			 					   
			 					   if(isClassEnvelopeBoolean){//使用了类现金
 			 						   Map<Integer,BigDecimal> rvoucherintMap 	= FixedPaymentMortgageUtil.getMonthInterest(voucheramount, yearRate,totalMonth,scale);//类现金每月还款利息
			 						   rvoucherint  							= rvoucherintMap.get(i).doubleValue();//类现金每月还款利息
			 					   }
			 					   
				 				   if(isIcrateBoolean){//使用了加息券 加息对象 只能只能是本金
					 					Map<Integer,BigDecimal> rintfeeMap 		=  FixedPaymentMortgageUtil.getMonthInterest(realamount, icrateCount, totalMonth, scale);//每月还款利息
					 					rintfee									= rintfeeMap.get(i).doubleValue();//每月还款加息券利息
				 				    }
				 				   
			 					if(lasePeriodBoolean){//还款最后一期
 						    		ramount 								= FixedPaymentMortgageUtil.getLastMonthPrincipal(realamount, yearRate,totalMonth, scale);//每月还款真本金
				 	  				if(isFalseEnvelopeBoolean){//使用了假现金
 				 	  					rlvoucher 							= FixedPaymentMortgageUtil.getLastMonthPrincipal(likevoucheramount, yearRate,totalMonth, scale);//每月还款假现金
				 	  				}
				 	  				
				 	  				if(isClassEnvelopeBoolean){//使用了类现金
 				 	  					rvoucher 							= FixedPaymentMortgageUtil.getLastMonthPrincipal(voucheramount, yearRate,totalMonth, scale);//每月还款类现金金
				 	  				}
				 	  				
						    	}else{
  				 		    		Map<Integer,BigDecimal> ramountMap		  = FixedPaymentMortgageUtil.getMonthPrincipal(realamount, yearRate,totalMonth, scale);//每月还款真本金
 				 		    		ramount 								  = ramountMap.get(i).doubleValue();//每月还款真本金
				 	  				if(isFalseEnvelopeBoolean){//使用了假现金
				 	  					Map<Integer,BigDecimal> rlvoucherMap  = FixedPaymentMortgageUtil.getMonthPrincipal(likevoucheramount, yearRate,totalMonth, scale);//每月还款假现金
 				 	  					rlvoucher 							  = rlvoucherMap.get(i).doubleValue();//每月还款假现金
				 	  				}
				 	  				
				 	  				if(isClassEnvelopeBoolean){//使用了类现金
				 	  					Map<Integer,BigDecimal> rvoucherMap   = FixedPaymentMortgageUtil.getMonthPrincipal(voucheramount, yearRate,totalMonth, scale);//每月还款类现金金
 				 	  					rvoucher 							  = rvoucherMap.get(i).doubleValue();//每月还款类现金金
				 	  				}
				 	  				
 						    	}
						    }else if(repaymentproSrt.equals((short)4) || dayorMonthBoolean){//按期付息到期还本 
   						    	 rinterest									= OneTimeServicingUtil.getMonthInterest(realamount, totalMonth, yearRate, scale);//真现金每月还款利息
 						    	 if(isFalseEnvelopeBoolean){//使用了假现金
 						    		 rlvoucherint 							= OneTimeServicingUtil.getMonthInterest(likevoucheramount, totalMonth, yearRate, scale);//假现金每月还款利息
						    	 }
 						    	 
						    	 if(isClassEnvelopeBoolean){//使用了类现金
 						    		 rvoucherint  							= OneTimeServicingUtil.getMonthInterest(voucheramount, totalMonth, yearRate, scale);//类现金每月还款利息
						    	 }
						    	 
  			 					 if(isIcrateBoolean){//使用了加息券icrateCount
 			 						 rintfee								= OneTimeServicingUtil.getMonthInterest(realamount, totalMonth, icrateCount, scale);//每月还款加息券利息
			 					 }
  			 					 
			 					if(lasePeriodBoolean){//还款最后一期
 						    		  ramount 								= realamount;//每月还款真本金
					 	  			  if(isFalseEnvelopeBoolean){//使用了假现金
 	 				 	  					rlvoucher 						= likevoucheramount;//每月还款假现金
					 	  			  }
					 	  			  
					 	  			  if(isClassEnvelopeBoolean){//使用了类现金
 	 				 	  					rvoucher 						= voucheramount;//每月还款类现金金
					 	  			  }
					 	  			  
						    	}else{
 						    		  ramount 								= 0.00;//每月还款真本金
					 	  			  if(isFalseEnvelopeBoolean){//使用了假现金
 	 				 	  					rlvoucher 						= 0.00;//每月还款假现金
					 	  			  }
					 	  			  
					 	  			  if(isClassEnvelopeBoolean){//使用了类现金
 	 				 	  					rvoucher 						= 0.00;//每月还款类现金金
					 	  			  }
					 	  			  
 						    	}
						    } 
 			 				rptotalamount		= Double.valueOf(df.format(ramount + rvoucher));//当期还款金额 = 本金+类现金
			 				rpinterestCount		= Double.valueOf(df.format(rinterest + rlvoucherint + rvoucherint + rintfee));//当期还款总利息（当期真现金利息+当期假现金利息+当期类现金利息+当期加息券利息）
			 				rptotalintCount     = Double.valueOf(df.format(rptotalamount + rpinterestCount));//当期还款本息
			 				
  			 				if(i == 1){	
	  		 					repayday 					  = DateUtil.addMonth(retdate, 1);//还款日期
			 					restprincipal 				  = Double.valueOf(df.format(realamount - ramount));//剩余还款本金(真本金)
			 					restamountintprofit			  = Double.valueOf(df.format(rinterestCount - rinterest));//剩余本金产生的利息 
			 					if(isClassEnvelopeBoolean){//使用了类现金
 			 						restvoucher				  = Double.valueOf(df.format(voucheramount - rvoucher));//剩余类现金
 			 						restvoucherintprofit	  = Double.valueOf(df.format(rvoucherintCount - rvoucherint));//剩余类现金产生的利息 
			 					}
			 					
			 					if(isFalseEnvelopeBoolean){//使用了假现金
			 						restlvoucher			  = Double.valueOf(df.format(likevoucheramount - rlvoucher));//剩余假现金
			 						restlvoucherintprofit	  = Double.valueOf(df.format(rlvoucherintCount - rlvoucherint));//剩余假现金产生的利息 
			 					}
			 					
			 					if(isIcrateBoolean){//使用了加息券
			 						restintprofit 			  = Double.valueOf(df.format(rintfeeCount - rintfee));//剩余加息卷收益的利息
			 					}
			 					
  					  		}else{
	  					  		repayday = DateUtil.addMonth(DateUtil.addMonth(retdate, 1), i-1);//还款日期
 					  			restprincipal 				 = Double.valueOf(df.format(restprincipal - ramount));//每期剩余还款本金
					  			restamountintprofit			 = Double.valueOf(df.format(restamountintprofit - rinterest));//剩余本金产生的利息 
					  			
			 					if(isClassEnvelopeBoolean){//使用了类现金
				 						restvoucher				  = Double.valueOf(df.format(restvoucher - rvoucher));//剩余类现金
				 						restvoucherintprofit	  = Double.valueOf(df.format(restvoucherintprofit - rvoucherint));//剩余类现金产生的利息 
			 					}
			 					
			 					if(isFalseEnvelopeBoolean){//使用了假现金
			 						restlvoucher			  = Double.valueOf(df.format(restlvoucher - rlvoucher));//剩余假现金
			 						restlvoucherintprofit	  = Double.valueOf(df.format(restlvoucherintprofit - rlvoucherint));//剩余假现金产生的利息 
			 					}
			 					
			 					if(isIcrateBoolean){//使用了加息券
			 						restintprofit 			  = Double.valueOf(df.format(restintprofit - rintfee));//剩余加息卷收益的利息
			 					}
			 					
	 				  		}
  			 				rorderno 						 = StringUtil.getNo();//还款流水号
			 				Map<String,Object> maps2 		 = new HashMap<String,Object>();
			 				maps2.put("tenderid", tenderItem.getId());//标的ID
			 				maps2.put("utorderno", utorderno);//投标订单号 根据具体投标记录对应还款
			 				maps2.put("periods", i);//分期还款计划期数
			 				maps2.put("planstatus", (short)1);//还款计划状态(1有效，2无效)
 			 				repayMent2 						 = repayMentServiceI.findRepayMentByConditions(maps2);//分期还款计划信息
			 	  			if(repayMent2 == null){//防止重复添加
 			 	  				/*************************标的分期还款计划开始***********************************/
			 	  				RepayMent repayMent = new RepayMent();
				 	  	  		repayMent.setRorderno(rorderno);				//还款流水号
		 		 	  	  		repayMent.setOutaccountid(outaccountid);		//借款用户ID
				 	  	  		repayMent.setInaccountid(inaccountid);			//投资用户ID
				 	  	  		if(proxyaccountid != null){//防止空指针异常
 				 	  	  			repayMent.setProxyaccountid(proxyaccountid);	//代还款人ID
				 	  	  		}
		 		 	  	  		repayMent.setUtorderno(utorderno);				//投标订单号 根据具体投标记录对应还款
				 	  	  		repayMent.setTenderid(tenderItem.getId());		//标号ID
				 	  	  		repayMent.setPeriods(i);						//还款期数（第几期）
 				 	  	   		repayMent.setIsdarepay((short)0);				//是否债转还款(投标记录发生过债转 1是0否)
 				 	  	  		repayMent.setRmode((short)0);					//还款模式（0初始  1人工，2系统，3线下 ）
 				 	  	  		repayMent.setRptotalamount(rptotalamount);	    //当期还款总金额(真本金+类现金)
				 	  	  		repayMent.setRptotalint(rpinterestCount);		//还款总利息(真现金利息+假现金利息+类现金利息+加息券利息)
	 			 	  	  		repayMent.setRprincipalint(rptotalintCount);	//当期还款总本息息（总本金+总利息） 
				 	  	  		repayMent.setRamount(ramount);					//当期还款金额（当期本金）
				 	  	  		repayMent.setRvoucher(rvoucher);				//当期还款类现金
				 	  	  		repayMent.setRlvoucher(rlvoucher);				//当期还款假现金
				 	  	  		repayMent.setOverdueamount(0.00);				//当期逾期滞纳金额
				 	  	  		repayMent.setRinterest(rinterest);				//当期还款本金利息（当期本金利息）
				 	  	  		repayMent.setRlvoucherint(rlvoucherint);		//当期还款假现金的利息
				 	  	  		repayMent.setRvoucherint(rvoucherint);			//当期还款类现金的利息
				 	  	  		repayMent.setRintfee(rintfee);					//当期还款加息劵的利息
	  			 	  	  		repayMent.setRestprincipal(restprincipal);		//剩余本金
				 	  	  		repayMent.setRestvoucher(restvoucher);			//剩余类现金
				 	  	  		repayMent.setRestlvoucher(restlvoucher);		//剩余假现金
				 	  	  		repayMent.setRestocamount(0.00);				//剩余滞纳金 剩余本金产生的滞纳金
				 	  	  		repayMent.setVrestocamount(0.00);				//剩余类现金滞纳金 剩余类现金产生的滞纳金
				 	  	  		repayMent.setRestamountintprofit(restamountintprofit);	//剩余本金产生的利息 （原收益+剩余加息劵收益）     *  本金
				 	  	  		repayMent.setRestvoucherintprofit(restvoucherintprofit);//剩余类现金产生的利息 （原收益+加息劵收益）    *  剩余类现金
				 	  	  		repayMent.setRestlvoucherintprofit(restlvoucherintprofit);//剩余假现金产生的利息 （原收益+加息劵收益）*  剩余假现金
				 	  	  		repayMent.setRestintprofit(restintprofit);		//剩余加息卷收益
				 	  	  		repayMent.setDisableocamount(0.00);				//失效滞纳金 失效本金产生的滞纳金
				 	  	  		repayMent.setDisablevoucher(0.00);				//失效类现金
				 	  	  		repayMent.setDisablelvoucher(0.00);				//失效假现金
				 	  	  		repayMent.setDisablevoucherint(0.00);			//失效类现金利息
				 	  	  		repayMent.setDisablevocamount(0.00);			//失效类现金滞纳金 失效类现金产生的滞纳金
				 	  	  		repayMent.setDisableintprofit(0.00);			//失效加息卷收益
				 	  	  		repayMent.setTransferprincipal(0.00);			//已转让本金
	   			 	  	  		repayMent.setBpenalty(0.00);					//提前还款欠收利息 提前还款
				 	  	  		repayMent.setOverdueamount(0.00);				//逾期滞纳金额 注意是否有代偿
				 	  	  		repayMent.setInterestexpense(0.00);	//投标利息的管理费 投资人—》平台
				 	  	  		repayMent.setFee(0.00);				//还款总利息费 还款金额利息+提前还款欠收利息+逾期滞纳金额
		  		 	  	  		repayMent.setRepaystatus((short)1);				//还款状态(1未还款，2已还款，3已提前还款，4处理中)
		  		 	  	     	repayMent.setIsaudit(repayMentIsAudit);			//是否审核  0不需要审核 1待审核 2审核通过 3审核不通过
				 	  	  		repayMent.setIsblending((short)0);				//是否系统勾兑（0未勾兑，1已勾兑）
				 	  	  		repayMent.setRtime(repayday);					//还款时间
				 	  	  		repayMent.setAddtime(new Date());  				//制表时间
				 	  	  		repayMent.setIsmanblending((short)0);			//是否人工勾兑（0未勾兑，1已勾兑）
				 	  	   		repayMent.setPaycompany(StringUtil.BANKNAME);	//托管通道公司（汇付天下）
				 	  	   		repayMent.setPlanstatus((short)1);				//还款计划状态(1有效，2无效)
				 	  	   		repayMent.setIsoverdue((short)0);				//是否逾期 0否，1是
				 	  	   		repayMent.setIsproxyrepay((short)0);			//是否代偿（1是，0否）
				 	  	   	    repayMent.setIsahead((short)0);				    //是否提前（0否，1是）
				 	  	   		repayMent.setAuthcode(userTender.getAuthcode());//投标申请授权码
				 	  	 		/*******************标的分期还款计划结束*****************************************/
				 	  	   		int ResCount = 0;
				 	  	   		ResCount = repayMentServiceI.insertSelective(repayMent);
				 	  	   		if(ResCount > 0){
				 	  	   			count++;
				 	  	   		}
 		 	 	  			}
 	 				  }
		 		}
			}
			
			if(dayorMonthBoolean){
 				if(userTenders.size() == count){
 					hashMapResult.put("boolean", true);
 					hashMapResult.put("message", "投资人还款计划生成成功");
 					return hashMapResult;
				}else{
					hashMapResult.put("boolean", false);
 					hashMapResult.put("message", "未知错误");
 					if(repayLogger.isDebugEnabled()){
						repayLogger.debug("生成 投资人的具体还款计划   失败 未知错误");
					}
 					return hashMapResult;
				}
	 		}else{
	 			if(totalMonth * userTenders.size() == count){
	 				hashMapResult.put("boolean", true);
 					hashMapResult.put("message", "投资人还款计划生成成功");
 					return hashMapResult;
	 			}else{
	 				hashMapResult.put("boolean", false);
 					hashMapResult.put("message", "未知错误");
 					if(repayLogger.isDebugEnabled()){
						repayLogger.debug("生成 投资人的具体还款计划   失败 未知错误");
					}
 					return hashMapResult;
	 			}
	 		}
			
		}
  		return hashMapResult;
  	}
	
	
	/**
	 * 20170627  需求变更 利息管理费记录在还款提交的时候生成记录 cjm
	 * 
	 * 
	 * 一下注释的代码是未删除生成利息管理费记录
	 * 
	 */
	
//	/**
//	 * 
//	* @Title: AutoGenerateRepayMents 
//	* @Description: TODO(自动生成投资人的具体还款计划) 
//	* @param @param tenderItemId  参数说明  标的ID
//	* @return void    返回类型 Map<String,Object> 
//	* 				 key值： boolean 为true表示生成还款计划成功
//	* 					   message 错误提示
//	* @author cjm
//	* @throws
//	 */
//	public synchronized static Map<String,Object> AutoGenerateRepayMents(BigDecimal tenderItemId){
//		Map<String,Object>  hashMapResult = new HashMap<String,Object>();
//  		if(tenderItemId == null){
//  			hashMapResult.put("boolean", false);
//  			hashMapResult.put("message", "标的ID为null");
//  			if(repayLogger.isDebugEnabled()){
//				repayLogger.debug("生成 投资人的具体还款计划   标的ID不能为空");
//			}
//  			return hashMapResult;
//  		}
//  		
//		TenderItem tenderItem  = tenderItemServiceI.findTenderItemById(tenderItemId);
// 		if(tenderItem == null){
// 			hashMapResult.put("boolean", false);
//  			hashMapResult.put("message", "'tenderItem' 标的对象为null");
//  			if(repayLogger.isDebugEnabled()){
//				repayLogger.debug("生成 投资人的具体还款计划   标的对象不能为空");
//			}
// 			return hashMapResult;
// 		}
// 		
//  		int    totalMonth   		    						= tenderItem.getLoantime();//标的借款周期
//		String dayormonthStr    								= tenderItem.getDayormonth();//天或月或年
//		Double yearRate    										= tenderItem.getTinterest();//标的利息(收益)
//		Date   Valuedate										= tenderItem.getValuedate();//截标日期
//		if(Valuedate == null){
//  			hashMapResult.put("boolean", false);
//  			hashMapResult.put("message", "'Valuedate'标的截标日期为null");
//  			if(repayLogger.isDebugEnabled()){
//				repayLogger.debug("生成 投资人的具体还款计划   标的截标日期不能为空");
//			}
//  			return hashMapResult;
//  		}
//		
//  		String Valuepoint      									= tenderItem.getValuepoint(); //起息日时间点
//  		Short repayMentType										= tenderItem.getRepaymenttype();//还款类型（1及时，2冻结还款）
//  		if(repayMentType == null){
//  			hashMapResult.put("boolean", false);
//  			hashMapResult.put("message", "'repayMentType'标的还款类型为null");
//  			if(repayLogger.isDebugEnabled()){
//				repayLogger.debug("生成 投资人的具体还款计划   标的还款类型不能为空");
//			}
//  			return hashMapResult;
//  		}
//  		
//  	    Short  Valuerule        								= tenderItem.getValuerule();//起息规则1.结标日当天,2.结标日次日,3.结标日固定时间之前,4.结标日固定时间之后
//  	    if(Valuerule == null){
//			hashMapResult.put("boolean", false);
//			hashMapResult.put("message", "'Valuerule'标的起息规则为null");
//			if(repayLogger.isDebugEnabled()){
//				repayLogger.debug("生成 投资人的具体还款计划   标的起息规则不能为空");
//			}
//			return hashMapResult;
//		}
//  	    
//  	    Date   retdate  										= StringUtil.getValuedate(Valuedate, Valuepoint, Valuerule);//起息日
//  		Short isaintexp = tenderItem.getIsaintexp();//是否设置利息管理费 1是 0否
//  		if(isaintexp == null){
//			hashMapResult.put("boolean", false);
//			hashMapResult.put("message", "'isaintexp'是否设置利息管理费为null");
//			if(repayLogger.isDebugEnabled()){
//				repayLogger.debug("生成 投资人的具体还款计划   标的是否设置利息管理费不能为空");
//			}
//			return hashMapResult;
//		}
//  		
//		boolean isaintexpBoolean = false;//是否设置利息管理费
//		List<InterestExpense> interestExpenses = null;//利息管理设置
//		if(isaintexp.equals((short)1)){//设置了利息管理收费
//			InterestExpense condition = new InterestExpense();
//			condition.setTid(tenderItemId);
//			interestExpenses = interestExpenseServiceI.selectByCondition(condition);
//  			isaintexpBoolean = true;//设置利息管理费
//		}
//		Short repayMentIsAudit = (short)(repayMentType == 1 ? 2 : 0);//是否审核 0待审核 1客服审核中 2审核通过 3审核不通过  
//		Short  repaymentproSrt  			 					= tenderItem.getRepaymentpro();//标的还款方式01：一次还本付息02：等额本金03：等额本息04：按期付息到期还本99：其他
// 		DecimalFormat df 					 					= new DecimalFormat("################0.00");//格式化金额rptotalintCount
// 		UserInterestRateCoupon  userInterestRateCoupon 			= null;//用户使用加息券对象
// 		Double rpinterestCount									= 0.00;//还款总利息(不包括加息券利息)
//		Double rptotalintCount									= 0.00;//还款本息总和(真本金+类现金+真本金利息+假现金利息+类现金利息+加息券利息)
//		Double interestCount									= 0.00;//还款利息总和(真本金利息+假现金利息+类现金利息+加息券利息)
// 		Double rptotalamountCount								= 0.00;//还款本金总和(本金+ 类现金)
// 		Double icrateCount		   								= 0.00;//加息券利率总和
//		Double rintfeeCount										= 0.00;//加息劵利息总和
//		Double rinterestCount									= 0.00;//真现金的利息总和
//		Double rlvoucherintCount								= 0.00;//假现金的利息总和
//		Double rvoucherintCount									= 0.00;//类现金的利息总和
// 		Double ramount											= 0.00;//当期还款真现金
//		Double rlvoucher										= 0.00;//当期还款假现金
//		Double rvoucher											= 0.00;//当期还款类现金
//		Double rptotalamount									= 0.00;//当期还款总金额(真本金+类现金)	
//		Double rptotalint										= 0.00;//当期还款总利息	(真现金利息+假现金利息+类现金利息+加息券利息)	
//  		Double rinterest										= 0.00;//当期还款真现金的利息
//		Double rlvoucherint										= 0.00;//当期还款假现金的利息
//		Double rvoucherint										= 0.00;//当期还款类现金的利息
//		Double rintfee											= 0.00;//当期加息卷的利息
// 	    Double restprincipal									= 0.00;//剩余本金
//		Double restvoucher										= 0.00;//剩余类现金
//		Double restlvoucher										= 0.00;//剩余假现金
// 		Double restamountintprofit								= 0.00;//剩余本金产生的利息 （原收益+剩余加息劵收益）*本金
//		Double restvoucherintprofit								= 0.00;//剩余类现金产生的利息 （原收益+加息劵收益）*剩余类现金
//		Double restlvoucherintprofit							= 0.00;//剩余假现金产生的利息 （原收益+加息劵收益）*剩余假现金
//		Double restintprofit									= 0.00;//剩余加息卷收益的利息
//		boolean isClassEnvelopeBoolean							= false;//是否使用了类现金 false 没有使用
//		boolean isFalseEnvelopeBoolean							= false;//是否使用了假现金 false 没有使用
//		boolean isIcrateBoolean									= false;//是否使用了加息券 false 没有使用
// 		boolean lasePeriodBoolean    		 					= false;//是否是最后一期
//		boolean dayorMonthBoolean 		     					= false;//还款周期是天时 还款类型只能一次性还本付息
//		Double monthPrincipalDou  			 					= 0.00; //每期还款本金金额
//		Double monthInterestDou   			 					= 0.00; //每期还款本金利息
//		Double monthPrincipal    			 					= 0.00;//每月还款本金 计算公式常量
//		Double interestexpense 	  			 					= 0.00;//利息管理费
//		Double countInterestexpense  		 					= 0.00;//总利息管理费
//		Double countInterestexpense1 		 					= 0.00;
//		BigDecimal outaccountid 	 		 					= null;//借款用户ID
//		BigDecimal inaccountid  			 					= null;//投资用户ID
//		BigDecimal proxyaccountid 	 		 					= null;//代还款人ID
//		RepayMent repayMent2		 		 					= null;//防止重复添加
//		UserAccountSafeInfo outInfo  							= null;//投资人账号安全信息对象
//		InterestExpense interestExpense2 	 					= null;//利息管理费设置对象
//		String utorderno 					 					= "";//投标订单号 根据具体投标记录对应还款
//		String rorderno 					 					= "";//还款流水号
//		Date repayday 						 					= null;//还款日期
//		int scale 							 					= 2;//小数点精确位数
//		Short ietype 			  			 					= 1; //利息管理费收取类型（1百分比，2最低，3最高）
//		Integer globalDay					 					= 365;//全局表天数  
//		Map<String,Object> condition = new HashMap<String,Object>();
//		condition.put("tenderid", tenderItem.getId());//标的号ID
//		condition.put("tstatus", (short)4);//投标的状态 （0.初始，1.待审核，2.失败，3.撤销，4.已完成）
//		condition.put("utproperty", (short)1);/** 投标属性（1原始投标，2债转投标） */
//		List<UserTender> userTenders = usertenderServiceI.findUserTenderRecord(condition);
//		List<UserTenderPlusLink> userTenderPlusLinks = null;//标的增益关联集合
//		Double totalPrincipal       							= 0.00;//借款金额(真本金+假现金+类现金）
//		Double realamount       								= 0.00;//真本金
//		Double likevoucheramount       							= 0.00;//假现金
//		Double voucheramount       								= 0.00;//类现金
//		int count = 0;
// 		if(userTenders.size() > 0){//有投标成功的记录
//			UserTenderPlusLinkServiceI 		userTenderPlusLinkServiceI 		= SpringContextHolder.getBean(UserTenderPlusLinkServiceI.class);//投标增益使用关联Service
// 			UserInterestRateCouponServiceI  userInterestRateCouponServiceI  = SpringContextHolder.getBean(UserInterestRateCouponServiceI.class);//用户使用券Service
//			for(UserTender userTender : userTenders){
//				  if(userTender.getValuedate() == null){
//					  userTender.setValuedate(retdate);//起息日
//					  usertenderServiceI.updateValueDateByTenderId(userTender);
//				  }
//				  
//				  if(userTender.getAuthcode() == null){
//					  if(repayLogger.isDebugEnabled()){
//							repayLogger.debug("生成 投资人的具体还款计划   投标记录的投标申请授权码不能为空,投标记录的投标订单号是："+userTender.getOrderno());
//					  }
//					  hashMapResult.put("boolean", false);
//					  hashMapResult.put("message", "生成 投资人的具体还款计划   投标记录的投标申请授权码不能为空,投标记录的投标订单号是："+userTender.getOrderno());
//  					  break;
//				  }
// 				  userInterestRateCoupon 									= null;//用户使用加息券对象
// 				  rpinterestCount											= 0.00;//还款总利息(不包括加息券利息)
//				  rptotalintCount											= 0.00;//还款本息总和(真本金+类现金+真本金利息+假现金利息+类现金利息+加息券利息)
//				  rptotalamountCount										= 0.00;//还款本金总和(投标金额-假现金)
//				  interestCount												= 0.00;//还款利息总和(真本金利息+假现金利息+类现金利息+加息券利息)
//				  icrateCount		   										= 0.00;//加息券利率总和
//				  rintfeeCount												= 0.00;//加息劵利息总和
//				  rinterestCount											= 0.00;//真现金的利息总和
//				  rlvoucherintCount											= 0.00;//假现金的利息总和
//				  rvoucherintCount											= 0.00;//类现金的利息总和
//		 		  ramount													= 0.00;//当期还款真现金
//				  rlvoucher													= 0.00;//当期还款假现金
//				  rvoucher													= 0.00;//当期还款类现金
//				  rptotalamount												= 0.00;//当期还款总金额		
//				  rptotalint												= 0.00;//当期还款总利息		
//		 		  rinterest													= 0.00;//当期还款真现金的利息
//				  rlvoucherint												= 0.00;//当期还款假现金的利息
//				  rvoucherint												= 0.00;//当期还款类现金的利息
//				  rintfee													= 0.00;//当期加息卷的利息
//		 	      restprincipal												= 0.00;//剩余本金
//				  restvoucher												= 0.00;//剩余类现金
//				  restlvoucher												= 0.00;//剩余假现金
//		 		  restamountintprofit										= 0.00;//剩余本金产生的利息 （原收益+剩余加息劵收益）*本金
//				  restvoucherintprofit										= 0.00;//剩余类现金产生的利息 （原收益+加息劵收益）*剩余类现金
//				  restlvoucherintprofit										= 0.00;//剩余假现金产生的利息 （原收益+加息劵收益）*剩余假现金
//				  restintprofit												= 0.00;//剩余加息卷收益的利息
//				  isClassEnvelopeBoolean									= false;//是否使用了类现金 false 没有使用
//				  isFalseEnvelopeBoolean									= false;//是否使用了假现金 false 没有使用
//				  isIcrateBoolean											= false;//是否使用了加息券 false 没有使用	   	 
// 				  userTenderPlusLinks  										= userTenderPlusLinkServiceI.findUserTenderPlusLinkByUtId(userTender.getId());//查找标的增益关联信息;
// 				  if(userTenderPlusLinks.size() > 0){//使用了增益手段
//					   for(UserTenderPlusLink userTenderPlusLink : userTenderPlusLinks){
//						    if(userTenderPlusLink.getIcid() != null){//使用了加息券
//						    	userInterestRateCoupon = userInterestRateCouponServiceI.findUserInterestRateCouponById(userTenderPlusLink.getIcid());
// 						    	if(isaintexp == null){
//									hashMapResult.put("boolean", false);
//									hashMapResult.put("message", "'userInterestRateCoupon'加息券对象为null");
//									if(repayLogger.isDebugEnabled()){
//										repayLogger.debug("生成 投资人的具体还款计划   加息券对象不能为空");
//									}
//									return hashMapResult;
//								}
// 						    	
// 						    	if(userInterestRateCoupon.getIcrate() == null){
//									hashMapResult.put("boolean", false);
//									hashMapResult.put("message", "'userInterestRateCoupon.getIcrate()'加息券利率为null");
//									if(repayLogger.isDebugEnabled()){
//										repayLogger.debug("生成 投资人的具体还款计划   加息券对象的加息券利率不能为空");
//									}
//									return hashMapResult;
//								}
// 						    	
// 						    	icrateCount += userInterestRateCoupon.getIcrate();//加息券利率
//						    	isIcrateBoolean = true;
//						    }
// 					   }
//				  }//使用增益结束
// 				    countInterestexpense1 			= 0.00; //计算总利息管理费
//	   			    lasePeriodBoolean 				= false;//是否最后一期
//		   			rorderno 						= StringUtil.getNo();//还款流水号
//		   			totalPrincipal  				= userTender.getAmount();//借款金额(真本金+假现金+类现金）
//		   			realamount       				= userTender.getRealamount();//真本金
//		   			voucheramount       			= userTender.getVoucheramount();//类现金
//		   			likevoucheramount       		= userTender.getLikevoucheramount();//假现金
//		  			outaccountid    				= userTender.getInaccountid();//借款用户ID
//		  			inaccountid    				    = userTender.getOutaccountid();//投资用户ID
//		  			proxyaccountid  				= tenderItem.getCompensatorymaid(); //代还款人ID
//		  			utorderno       				= userTender.getOrderno();//投标订单号 根据具体投标记录对应还款
//		  			if(inaccountid == null){
//						hashMapResult.put("boolean", false);
//						hashMapResult.put("message", "'inaccountid' 投资用户ID为null");
//						if(repayLogger.isDebugEnabled()){
//							repayLogger.debug("生成 投资人的具体还款计划   投标记录的投资用户ID不能为空");
//						}
//						return hashMapResult;
//					}
//		  			
//		  			if(outaccountid == null){
//						hashMapResult.put("boolean", false);
//						hashMapResult.put("message", "'outaccountid' 借款用户ID为null");
//						if(repayLogger.isDebugEnabled()){
//							repayLogger.debug("生成 投资人的具体还款计划   投标记录的借款用户ID不能为空");
//						}
//						return hashMapResult;
//					}
//		  			
//		  			if(utorderno == null){
//						hashMapResult.put("boolean", false);
//						hashMapResult.put("message", "'utorderno' 投标订单号为null");
//						if(repayLogger.isDebugEnabled()){
//							repayLogger.debug("生成 投资人的具体还款计划   投标记录的投标订单号不能为空");
//						}
//						return hashMapResult;
//					}
//		  			
//		  			if(rorderno == null){
//						hashMapResult.put("boolean", false);
//						hashMapResult.put("message", "'rorderno' 还款流水号为null");
//						if(repayLogger.isDebugEnabled()){
//							repayLogger.debug("生成 投资人的具体还款计划   投标记录的还款流水号不能为空");
//						}
//						return hashMapResult;
//					}
//		  			 
// 		  			outInfo = userAccountSafeInfoServiceI.selectByBaseId(outaccountid);//投资人账号安全信息对象
// 		  			if(totalPrincipal == null){
//						hashMapResult.put("boolean", false);
//						hashMapResult.put("message", "'totalPrincipal' 借款金额为null");
//						if(repayLogger.isDebugEnabled()){
//							repayLogger.debug("生成 投资人的具体还款计划   投标记录的借款金额不能为空");
//						}
//						return hashMapResult;
//					}
// 		  			
// 		  			if(outInfo == null){
//						hashMapResult.put("boolean", false);
//						hashMapResult.put("message", "'outInfo' 投资人账号安全信息对象为null");
//						if(repayLogger.isDebugEnabled()){
//							repayLogger.debug("生成 投资人的具体还款计划   投标记录的投资人账号安全信息对象不能为空");
//						}
//						return hashMapResult;
//					}
// 		  			
// 		  			String ugrade = outInfo.getUgrade().toString();//投资人会员等级
// 		  			if(ugrade == null){
//						hashMapResult.put("boolean", false);
//						hashMapResult.put("message", "'ugrade' 投资人账号安全信息对象会员等级为null");
//						if(repayLogger.isDebugEnabled()){
//							repayLogger.debug("生成 投资人的具体还款计划   投资人账号安全信息对象会员等级为null");
//						}
//						return hashMapResult;
//					}
// 		  			
//		   			if(dayormonthStr.equals("年")){
//		  				totalMonth = tenderItem.getLoantime();
//		  				totalMonth = totalMonth * 12;
//		  			}else if(dayormonthStr.equals("天")){
//		  				dayorMonthBoolean = true;
//		  			}
//		  			
//		  			if(repaymentproSrt.equals((short)1)){//借款类型是一次性还本付息时 生成还款计划为一期
//		  				dayorMonthBoolean = true;
//		  			}
//		  			
//		  			if(voucheramount > 0){//使用了类现金
//		  				isClassEnvelopeBoolean = true;
//		  			}
//		  			
//		  			if(likevoucheramount > 0){
//		  				isFalseEnvelopeBoolean = true;
//		  			}
//		  			
//   				if(dayorMonthBoolean){//生成还款计划为一期
// 		 			if(dayormonthStr.equals("天")){//借款周期是天时 
// 		 				yearRate = yearRate / globalDay;//日利率
//		 				monthInterestDou 			= Double.valueOf(df.format(realamount * yearRate * totalMonth));//借款本金利息（计算公式 ： 借款本金 * 日利率 * 借款周期）
//		 				monthPrincipalDou 			= Double.valueOf(df.format(realamount));//借款本金
//		 				
// 		 				if(isIcrateBoolean){//使用了加息券 只对本金加息
//		 					yearRate 				= icrateCount / globalDay;//日利率(（加息券利率 / 一年总天数)
//		 					rintfeeCount 			= Double.valueOf(df.format(realamount * yearRate * totalMonth));//加息卷收益总和
//		 				}	
// 		 				
// 		 				if(isClassEnvelopeBoolean){//使用了类现金
// 	  		 				rvoucherintCount 	   = Double.valueOf(df.format(voucheramount * yearRate * totalMonth));//类现金产生的利息 
// 	  		 				rvoucher			   = Double.valueOf(df.format(voucheramount));//还款类现金  
// 			 			}
// 	  		 			
// 			 			if(isFalseEnvelopeBoolean){//使用了假现金
// 			 				rlvoucherintCount 	  = Double.valueOf(df.format(likevoucheramount * yearRate * totalMonth));//当期假现金产生的利息 
//  			 			}
// 			 			
//		 			}else{
//		  				monthInterestDou  			= Double.valueOf(df.format(OneTimeServicingUtil.getOneTimeInterestCount(realamount, totalMonth, yearRate, scale)));//一次性还本付息总利息
//		 				monthPrincipalDou 			= Double.valueOf(df.format(realamount));//借款本金
//		 				if(isIcrateBoolean){//使用了加息券
//		 					rintfeeCount 			= Double.valueOf(df.format(OneTimeServicingUtil.getOneTimeInterestCount(realamount, totalMonth, icrateCount, scale)));//加息卷收益总和
//		 				}
//		 				
//		 				if(isClassEnvelopeBoolean){//使用了类现金
//		 					rvoucherintCount 		= Double.valueOf(df.format(OneTimeServicingUtil.getOneTimeInterestCount(voucheramount, totalMonth, yearRate, scale)));//类现金产生的利息 
//	  		 				rvoucher			    = Double.valueOf(df.format(voucheramount));//还款类现金 
//			 			}
//	  		 			
//			 			if(isFalseEnvelopeBoolean){//使用了假现金
//			 				rlvoucherintCount 			= Double.valueOf(df.format(OneTimeServicingUtil.getOneTimeInterestCount(likevoucheramount, totalMonth, yearRate, scale)));//当期假现金产生的利息 
// 			 			}
//		  			}
// 		 			rptotalamountCount				= Double.valueOf(df.format(monthPrincipalDou + rvoucher));//还款总本金(真本金+类现金)
//  		 			interestCount					= Double.valueOf(df.format(rlvoucherintCount + rvoucherintCount + rintfeeCount + monthInterestDou ));//还款利息总和(真本金利息+假现金利息+类现金利息+加息券利息)
// 		 			rptotalintCount  				= Double.valueOf(df.format(rptotalamountCount + interestCount));//总本息 (还款的总本息=真本金+类现金+真本金利息+假现金利息+类现金利息+加息券利息)
//   		 			Map<String,Object> hashMap = new HashMap<String,Object>();
//		 			hashMap.put("tenderid", tenderItem.getId());//标的ID
//		 			hashMap.put("utorderno", utorderno);//投标订单号 根据具体投标记录对应还款
//	 	 			hashMap.put("periods", 1);//期数
//	 	 			hashMap.put("planstatus", (short)1);//还款计划状态(1有效，2无效) 
// 		 			repayMent2 = repayMentServiceI.findRepayMentByConditions(hashMap);
//		  			if(repayMent2 == null){//防止重复添加
//		  				if(isaintexpBoolean){//设置了标的利息管理费收取
//			  				interestExpense2 			= getInterestExpense(interestExpenses, outInfo);
// 			  				if(interestExpense2 == null){
//								hashMapResult.put("boolean", false);
//								hashMapResult.put("message", "'interestExpense2' 标的利息管理费设置对象为null");
//								if(repayLogger.isDebugEnabled()){
//									repayLogger.debug("生成 投资人的具体还款计划   'interestExpense2' 标的利息管理费设置对象为null");
//								}
//								return hashMapResult;
//							}
//			  				double iepercent 			=  interestExpense2.getIepercent();//利息管理费百份比
// 			   		    	double maxiefee 	 		=  interestExpense2.getMaxiefee();//该段最高利息管理收费金额
// 			  	 		    double fee1 = Arith.round(Arith.mul(interestCount, iepercent), 2);
// 			   		    	if(fee1 >= maxiefee){
//			   		    		ietype 					= 3;//利息管理费收取类型（1百分比，2最低，3最高）
//			   		    		fee1   					= maxiefee;
//			   		    	}
//			   		    	  interestexpense 			= Double.parseDouble(df.format(fee1));//利息管理费
//			   		    	  countInterestexpense 		= Double.parseDouble(df.format(fee1));//总利息管理费
//			  		      }
//		 	  				/*************************标的分期还款计划开始***********************************/
//			 	  	  		RepayMent repayMent = new RepayMent();
//			 	  	  		repayMent.setRorderno(rorderno);				//还款流水号
//	 		 	  	  		repayMent.setOutaccountid(outaccountid);		//借款用户ID
//			 	  	  		repayMent.setInaccountid(inaccountid);			//投资用户ID
//			 	  	  		if(proxyaccountid != null){//防止空指针异常
// 			 	  	  			repayMent.setProxyaccountid(proxyaccountid);	//代还款人ID
//			 	  	  		}
//	 		 	  	  		repayMent.setUtorderno(utorderno);				//投标订单号 根据具体投标记录对应还款
//			 	  	  		repayMent.setTenderid(tenderItem.getId());		//标号ID
//			 	  	  		repayMent.setPeriods(1);						//还款期数（第几期）
//			 	  	   		repayMent.setIsdarepay((short)0);				//是否债转还款(投标记录发生过债转 1是0否)
//			 	  	  		repayMent.setRmode((short)1);					//还款模式（1人工，2系统，3线下）
//			 	  	  		repayMent.setRptotalamount(rptotalamountCount);	//还款总金额(真本金+类现金)
//			 	  	  		repayMent.setRptotalint(interestCount);			//当期还款总利息(当期真现金利息+当期假现金利息+当期类现金利息+当期加息券利息)
// 			 	  	  		repayMent.setRprincipalint(rptotalintCount);	//当期还款总本息（总本金+总利息） 
//			 	  	  		repayMent.setRamount(monthPrincipalDou);		//当期还款金额（当期本金）
//			 	  	  		repayMent.setRvoucher(rvoucher);				//当期还款类现金
//			 	  	  		repayMent.setRlvoucher(likevoucheramount);		//当期还款假现金
//			 	  	  		repayMent.setOverdueamount(0.00);				//当期逾期滞纳金额
//			 	  	  		repayMent.setRinterest(monthInterestDou);		//当期还款本金利息（当期本金利息）
//			 	  	  		repayMent.setRlvoucherint(rlvoucherintCount);	//当期还款假现金的利息
//			 	  	  		repayMent.setRvoucherint(rvoucherintCount);		//当期还款类现金的利息
//			 	  	  		repayMent.setRintfee(rintfeeCount);				//当期还款加息劵的利息
//  			 	  	  		repayMent.setRestprincipal(0.00);				//剩余本金
//			 	  	  		repayMent.setRestvoucher(0.00);					//剩余类现金
//			 	  	  		repayMent.setRestlvoucher(0.00);				//剩余假现金
//			 	  	  		repayMent.setRestocamount(0.00);				//剩余滞纳金 剩余本金产生的滞纳金
//			 	  	  		repayMent.setVrestocamount(0.00);				//剩余类现金滞纳金 剩余类现金产生的滞纳金
//			 	  	  		repayMent.setRestamountintprofit(0.00);			//剩余本金产生的利息 （原收益+剩余加息劵收益）     *  本金
//			 	  	  		repayMent.setRestvoucherintprofit(0.00);		//剩余类现金产生的利息 （原收益+加息劵收益）    *  剩余类现金
//			 	  	  		repayMent.setRestlvoucherintprofit(0.00);		//剩余假现金产生的利息 （原收益+加息劵收益）*  剩余假现金
//			 	  	  		repayMent.setRestintprofit(0.00);				//剩余加息卷收益
//			 	  	  		repayMent.setDisableocamount(0.00);				//失效滞纳金 失效本金产生的滞纳金
//			 	  	  		repayMent.setDisablevoucher(0.00);				//失效类现金
//			 	  	  		repayMent.setDisablevoucherint(0.00);			//失效类现金利息
// 			 	  	  		repayMent.setDisablelvoucher(0.00);				//失效假现金
//			 	  	  		repayMent.setDisablevocamount(0.00);			//失效类现金滞纳金 失效类现金产生的滞纳金
//			 	  	  		repayMent.setDisableintprofit(0.00);			//失效加息卷收益
//			 	  	  		repayMent.setTransferprincipal(0.00);			//已转让本金
//   			 	  	  		repayMent.setBpenalty(0.00);					//提前还款欠收利息 提前还款
//			 	  	  		repayMent.setOverdueamount(0.00);				//逾期滞纳金额 注意是否有代偿
//			 	  	  		repayMent.setInterestexpense(interestexpense);	//投标利息的管理费 投资人—》平台
//			 	  	  		repayMent.setIsproxyrepay((short)2);			//是否代偿（1是，2否）
//			 	  	  		repayMent.setFee(interestexpense);				//还款总利息费 还款金额利息+提前还款欠收利息+逾期滞纳金额
//	  		 	  	  		repayMent.setRepaystatus((short)1);				//还款状态还款状态(1未还款，2已还款，3已提前还款，4正常还款处理中,5提前还款审核中，6提前还款处理中)
//	  		 	  	     	repayMent.setIsaudit(repayMentIsAudit);			//是否审核  0不需要审核 1待审核 2审核通过 3审核不通过
//			 	  	  		repayMent.setIsblending((short)0);				//是否系统勾兑（0未勾兑，1已勾兑）
//			 	  	  		repayMent.setRtime(DateUtil.addMonth(retdate, 1));//还款时间
//			 	  	  		repayMent.setAddtime(new Date());  				//制表时间
//			 	  	  		repayMent.setIsmanblending((short)0);			//是否人工勾兑（0未勾兑，1已勾兑）
//			 	  	   		repayMent.setPaycompany("徽商银行");				//托管通道公司（汇付天下）
//			 	  	   		repayMent.setPlanstatus((short)1);				//还款计划状态(1有效，2无效)
//			 	  	   		repayMent.setIsoverdue((short)0);				//是否逾期 0否，1是
//			 	  	   		repayMent.setAuthcode(userTender.getAuthcode());   				//投标申请授权码
//			 	  	 		/*******************标的分期还款计划结束*****************************************/
//			 	  	   		int resCount = 0;
//			 	  	   		resCount = repayMentServiceI.insertSelective(repayMent);
//			 	  	   		if(resCount > 0){
//			 	  	   			count ++;
//			 	  	   		}
// 		  			} 
//		  			
//		  			if(isaintexpBoolean){//设置了标的利息管理费收取
//		  				InterestExpenseRecord interestExpenseRecord3 = null;
//		  			    if(repayMent2 != null){
//		  			    	interestExpenseRecord3 = interestExpenseRecordServiceI.findInterestExpenseRecordByRorderno(repayMent2.getRorderno());
//		  			    }
//		  				/**********标的利息管理费记录开始*************/
//	 					if(interestExpenseRecord3 == null){//数据库没有这条数据
//							InterestExpenseRecord interestExpenseRecord = new InterestExpenseRecord();
//							interestExpenseRecord.setIeorderno(StringUtil.getNo());						//利息管理费流水号
//							interestExpenseRecord.setRorderno(rorderno);								//还款流水号
//							if(interestExpense2 != null){
//								interestExpenseRecord.setIeid(interestExpense2.getId());				//利息管理费设置表Id  
//							}
//							interestExpenseRecord.setTenderid(tenderItem.getId());						//标号ID
//							if(interestExpense2.getIerecmanid() != null){
//	 							interestExpenseRecord.setIntexpmanid(interestExpense2.getIerecmanid());	//利息管理费收款人ID 汇付天下没有这个接口
//							}
//							interestExpenseRecord.setInvestorid(userTender.getOutaccountid());			//投资人ID
//							interestExpenseRecord.setIntexpfee(interestexpense);						//利息管理费
//							interestExpenseRecord.setIetype(ietype);									//利息管理费收取类型（1百分比，2最低，3最高）
//							interestExpenseRecord.setIsdeal((short)0);									//是否处理（0否，1是）
//							interestExpenseRecord.setMadetime(new Date());								//创建时间
//							interestExpenseRecord.setPlanstatus((short)1);								//利息管理费收取计划状态 1有效 2 无效
//		   					interestExpenseRecord.setIeproperty((short)1);							    //管理费属性 1正常投标2 债权转让后
//							interestExpenseRecordServiceI.insertSelective(interestExpenseRecord);
//						}
//						/**********标的利息管理费记录结束*************/
//		  			}
//		 		}
//				else{//多期还款计划
// 
//  						if(repaymentproSrt.equals((short)2) && !dayorMonthBoolean){//等额本金
// 							rinterestCount							= FixedBasisMortgageUtil.getInterestCount(realamount, totalMonth, yearRate, scale);//还款真现金总利息
//							 
//							if(isFalseEnvelopeBoolean){//使用了假现金
// 								rlvoucherintCount					= FixedBasisMortgageUtil.getInterestCount(likevoucheramount, totalMonth, yearRate, scale);//还款假现金总利息
//							}
//							
//							if(isClassEnvelopeBoolean){//使用了类现金
// 								rvoucherintCount					= FixedBasisMortgageUtil.getInterestCount(voucheramount, totalMonth, yearRate, scale);//还款类现金总利息
//							}
//							
//							if(isIcrateBoolean){//使用了加息券icrateCount
//								rintfeeCount						= FixedBasisMortgageUtil.getInterestCount(realamount, totalMonth, icrateCount, scale);//加息券利息总和
// 							}
//							
//					    }else if(repaymentproSrt.equals((short)3) && !dayorMonthBoolean){//等额本息
// 					    	rinterestCount							= FixedPaymentMortgageUtil.getMonthlyPayInterestCount(realamount, yearRate, totalMonth, scale);//还款真现金总利息	
//					    
//					    	if(isFalseEnvelopeBoolean){//使用了假现金
// 					    		rlvoucherintCount					= FixedPaymentMortgageUtil.getMonthlyPayInterestCount(likevoucheramount, yearRate, totalMonth, scale);//还款假现金总利息
//					    	}
//					    	
//					    	if(isClassEnvelopeBoolean){//使用了类现金
// 					    		rvoucherintCount					= FixedPaymentMortgageUtil.getMonthlyPayInterestCount(voucheramount, yearRate, totalMonth, scale);//还款类现金总利息
//					    	}
//					    	
//							if(isIcrateBoolean){//使用了加息券icrateCount
//								rintfeeCount					    = FixedPaymentMortgageUtil.getMonthlyPayInterestCount(realamount,icrateCount, totalMonth,  scale);//加息券利息总和
// 							}
//							
// 					    }else if(repaymentproSrt.equals((short)4) || dayorMonthBoolean){//按期付息到期还本 
// 					    	rinterestCount							= OneTimeServicingUtil.getInterestCount(realamount, totalMonth, yearRate, scale);//还款真现金总利息
//					    
//					    	if(isFalseEnvelopeBoolean){//使用了假现金
// 					    		rlvoucherintCount					= OneTimeServicingUtil.getInterestCount(likevoucheramount, totalMonth, yearRate, scale);//还款假现金总利息
//					    	}
//					    	if(isClassEnvelopeBoolean){//使用了类现金
// 					    		rvoucherintCount					= OneTimeServicingUtil.getInterestCount(voucheramount, totalMonth, yearRate, scale);//还款类现金总利息
//					    	}
//							if(isIcrateBoolean){//使用了加息券
//								rintfeeCount						= OneTimeServicingUtil.getInterestCount(realamount, totalMonth, icrateCount, scale);//加息券利息总和
//							}
// 					    }
//		 	 			for(int i = 1 ;i <= totalMonth;i++){
//		  	 				 if(i == totalMonth){//最后一期 
//			 					lasePeriodBoolean 							= true;
//			 				 }
//		  	 				 
//			 				 if(repaymentproSrt.equals((short)2) && !dayorMonthBoolean){//等额本金
// 			 					 Map<Integer,BigDecimal> rinterestMap 		= FixedBasisMortgageUtil.getMonthInterest(realamount, totalMonth, yearRate, scale);//真现金每月还款利息
//			 					 rinterest  								= rinterestMap.get(i).doubleValue();//真现金每月还款利息
//			 					 
//			 					 if(isFalseEnvelopeBoolean){//使用了假现金
// 			 						 Map<Integer,BigDecimal> rlvoucherintMap 	= FixedBasisMortgageUtil.getMonthInterest(likevoucheramount, totalMonth, yearRate, scale);//假现金每月还款利息
//			 						 rlvoucherint  								= rlvoucherintMap.get(i).doubleValue();//假现金每月还款利息
//			 					 }
//			 					 
//			 					 if(isClassEnvelopeBoolean){//使用了类现金
// 			 						 Map<Integer,BigDecimal> rvoucherintMap 	= FixedBasisMortgageUtil.getMonthInterest(voucheramount, totalMonth, yearRate, scale);//类现金每月还款利息
//			 						 rvoucherint  								= rvoucherintMap.get(i).doubleValue();//类现金每月还款利息
//			 					 }
//			 					 
// 			 					if(isIcrateBoolean){//使用了加息券
//			 						 Map<Integer,BigDecimal>  rintfeeMap    = FixedBasisMortgageUtil.getMonthInterest(realamount, totalMonth, icrateCount, scale);//每月还款加息券利息
//			 						 rintfee								= rintfeeMap.get(i).doubleValue();//每月还款加息券利息
//			 					}
// 			 					
//			 					if(lasePeriodBoolean){//还款最后一期
// 				 	  				ramount 								= FixedBasisMortgageUtil.getLastMonthPrincipal(realamount, totalMonth, scale);//每月还款真本金
//				 	  				
//				 	  				if(isFalseEnvelopeBoolean){//使用了假现金
// 				 	  					rlvoucher 							= FixedBasisMortgageUtil.getLastMonthPrincipal(likevoucheramount, totalMonth, scale);//每月还款假现金
//				 	  				}
//				 	  				
//				 	  				if(isClassEnvelopeBoolean){//使用了类现金
// 				 	  					rvoucher 							= FixedBasisMortgageUtil.getLastMonthPrincipal(voucheramount, totalMonth, scale);//每月还款类现金金
//				 	  				}
//				 	  				
//  				 	  			}else{
//  			 			    	    ramount 								= FixedBasisMortgageUtil.getMonthPrincipal(realamount, totalMonth, scale);//每月还款真本金
//				 	  				if(isFalseEnvelopeBoolean){//使用了假现金
//				 	  					rlvoucher 							= FixedBasisMortgageUtil.getMonthPrincipal(likevoucheramount, totalMonth, scale);//每月还款假现金
//				 	  				}
//				 	  				
//				 	  				if(isClassEnvelopeBoolean){//使用了类现金
//				 	  					rvoucher 							= FixedBasisMortgageUtil.getMonthPrincipal(voucheramount, totalMonth, scale);//每月还款类现金金
//				 	  				}
// 				 	  			}
//			 					
//						    }else if(repaymentproSrt.equals((short)3) && !dayorMonthBoolean){//等额本息
//  		 						   Map<Integer,BigDecimal> rinterestMap 	= FixedPaymentMortgageUtil.getMonthInterest(realamount, yearRate,totalMonth,scale);//真现金每月还款利息
//		 						   rinterest  								= rinterestMap.get(i).doubleValue();//真现金每月还款利息
// 			 					   if(isFalseEnvelopeBoolean){//使用了假现金
// 			 						   Map<Integer,BigDecimal> rlvoucherintMap 	= FixedPaymentMortgageUtil.getMonthInterest(likevoucheramount, yearRate,totalMonth,scale);//假现金每月还款利息
//			 						   rlvoucherint  							= rlvoucherintMap.get(i).doubleValue();//假现金每月还款利息
//			 					   }
// 			 					   
//			 					   if(isClassEnvelopeBoolean){//使用了类现金
// 			 						   Map<Integer,BigDecimal> rvoucherintMap 	= FixedPaymentMortgageUtil.getMonthInterest(voucheramount, yearRate,totalMonth,scale);//类现金每月还款利息
//			 						   rvoucherint  							= rvoucherintMap.get(i).doubleValue();//类现金每月还款利息
//			 					   }
//			 					   
//				 				   if(isIcrateBoolean){//使用了加息券 加息对象 只能只能是本金
//					 					Map<Integer,BigDecimal> rintfeeMap 		=  FixedPaymentMortgageUtil.getMonthInterest(realamount, icrateCount, totalMonth, scale);//每月还款利息
//					 					rintfee									= rintfeeMap.get(i).doubleValue();//每月还款加息券利息
//				 				    }
//				 				   
//			 					if(lasePeriodBoolean){//还款最后一期
// 						    		ramount 								= FixedPaymentMortgageUtil.getLastMonthPrincipal(realamount, yearRate,totalMonth, scale);//每月还款真本金
//				 	  				if(isFalseEnvelopeBoolean){//使用了假现金
// 				 	  					rlvoucher 							= FixedPaymentMortgageUtil.getLastMonthPrincipal(likevoucheramount, yearRate,totalMonth, scale);//每月还款假现金
//				 	  				}
//				 	  				
//				 	  				if(isClassEnvelopeBoolean){//使用了类现金
// 				 	  					rvoucher 							= FixedPaymentMortgageUtil.getLastMonthPrincipal(voucheramount, yearRate,totalMonth, scale);//每月还款类现金金
//				 	  				}
//				 	  				
//						    	}else{
//  				 		    		Map<Integer,BigDecimal> ramountMap		  = FixedPaymentMortgageUtil.getMonthPrincipal(realamount, yearRate,totalMonth, scale);//每月还款真本金
// 				 		    		ramount 								  = ramountMap.get(i).doubleValue();//每月还款真本金
//				 	  				if(isFalseEnvelopeBoolean){//使用了假现金
//				 	  					Map<Integer,BigDecimal> rlvoucherMap  = FixedPaymentMortgageUtil.getMonthPrincipal(likevoucheramount, yearRate,totalMonth, scale);//每月还款假现金
// 				 	  					rlvoucher 							  = rlvoucherMap.get(i).doubleValue();//每月还款假现金
//				 	  				}
//				 	  				
//				 	  				if(isClassEnvelopeBoolean){//使用了类现金
//				 	  					Map<Integer,BigDecimal> rvoucherMap   = FixedPaymentMortgageUtil.getMonthPrincipal(voucheramount, yearRate,totalMonth, scale);//每月还款类现金金
// 				 	  					rvoucher 							  = rvoucherMap.get(i).doubleValue();//每月还款类现金金
//				 	  				}
//				 	  				
// 						    	}
//						    }else if(repaymentproSrt.equals((short)4) || dayorMonthBoolean){//按期付息到期还本 
//   						    	 rinterest									= OneTimeServicingUtil.getMonthInterest(realamount, totalMonth, yearRate, scale);//真现金每月还款利息
// 						    	 if(isFalseEnvelopeBoolean){//使用了假现金
// 						    		 rlvoucherint 							= OneTimeServicingUtil.getMonthInterest(likevoucheramount, totalMonth, yearRate, scale);//假现金每月还款利息
//						    	 }
// 						    	 
//						    	 if(isClassEnvelopeBoolean){//使用了类现金
// 						    		 rvoucherint  							= OneTimeServicingUtil.getMonthInterest(voucheramount, totalMonth, yearRate, scale);//类现金每月还款利息
//						    	 }
//						    	 
//  			 					 if(isIcrateBoolean){//使用了加息券icrateCount
// 			 						 rintfee								= OneTimeServicingUtil.getMonthInterest(realamount, totalMonth, icrateCount, scale);//每月还款加息券利息
//			 					 }
//  			 					 
//			 					if(lasePeriodBoolean){//还款最后一期
// 						    		  ramount 								= realamount;//每月还款真本金
//					 	  			  if(isFalseEnvelopeBoolean){//使用了假现金
// 	 				 	  					rlvoucher 						= likevoucheramount;//每月还款假现金
//					 	  			  }
//					 	  			  
//					 	  			  if(isClassEnvelopeBoolean){//使用了类现金
// 	 				 	  					rvoucher 						= voucheramount;//每月还款类现金金
//					 	  			  }
//					 	  			  
//						    	}else{
// 						    		  ramount 								= 0.00;//每月还款真本金
//					 	  			  if(isFalseEnvelopeBoolean){//使用了假现金
// 	 				 	  					rlvoucher 						= 0.00;//每月还款假现金
//					 	  			  }
//					 	  			  
//					 	  			  if(isClassEnvelopeBoolean){//使用了类现金
// 	 				 	  					rvoucher 						= 0.00;//每月还款类现金金
//					 	  			  }
//					 	  			  
// 						    	}
//						    } 
// 			 				rptotalamount		= Double.valueOf(df.format(ramount + rvoucher));//当期还款金额 = 本金+类现金
//			 				rpinterestCount		= Double.valueOf(df.format(rinterest + rlvoucherint + rvoucherint + rintfee));//当期还款总利息（当期真现金利息+当期假现金利息+当期类现金利息+当期加息券利息）
//			 				rptotalintCount     = Double.valueOf(df.format(rptotalamount + rpinterestCount));//当期还款本息
//			 				
//  			 				if(i == 1){	
//	  		 					repayday 					  = DateUtil.addMonth(retdate, 1);//还款日期
//			 					restprincipal 				  = Double.valueOf(df.format(realamount - ramount));//剩余还款本金(真本金)
//			 					restamountintprofit			  = Double.valueOf(df.format(rinterestCount - rinterest));//剩余本金产生的利息 
//			 					if(isClassEnvelopeBoolean){//使用了类现金
// 			 						restvoucher				  = Double.valueOf(df.format(voucheramount - rvoucher));//剩余类现金
// 			 						restvoucherintprofit	  = Double.valueOf(df.format(rvoucherintCount - rvoucherint));//剩余类现金产生的利息 
//			 					}
//			 					
//			 					if(isFalseEnvelopeBoolean){//使用了假现金
//			 						restlvoucher			  = Double.valueOf(df.format(likevoucheramount - rlvoucher));//剩余假现金
//			 						restlvoucherintprofit	  = Double.valueOf(df.format(rlvoucherintCount - rlvoucherint));//剩余假现金产生的利息 
//			 					}
//			 					
//			 					if(isIcrateBoolean){//使用了加息券
//			 						restintprofit 			  = Double.valueOf(df.format(rintfeeCount - rintfee));//剩余加息卷收益的利息
//			 					}
//			 					
//  					  		}else{
//	  					  		repayday = DateUtil.addMonth(DateUtil.addMonth(retdate, 1), i-1);//还款日期
// 					  			restprincipal 				 = Double.valueOf(df.format(restprincipal - ramount));//每期剩余还款本金
//					  			restamountintprofit			 = Double.valueOf(df.format(restamountintprofit - rinterest));//剩余本金产生的利息 
//					  			
//			 					if(isClassEnvelopeBoolean){//使用了类现金
//				 						restvoucher				  = Double.valueOf(df.format(restvoucher - rvoucher));//剩余类现金
//				 						restvoucherintprofit	  = Double.valueOf(df.format(restvoucherintprofit - rvoucherint));//剩余类现金产生的利息 
//			 					}
//			 					
//			 					if(isFalseEnvelopeBoolean){//使用了假现金
//			 						restlvoucher			  = Double.valueOf(df.format(restlvoucher - rlvoucher));//剩余假现金
//			 						restlvoucherintprofit	  = Double.valueOf(df.format(restlvoucherintprofit - rlvoucherint));//剩余假现金产生的利息 
//			 					}
//			 					
//			 					if(isIcrateBoolean){//使用了加息券
//			 						restintprofit 			  = Double.valueOf(df.format(restintprofit - rintfee));//剩余加息卷收益的利息
//			 					}
//			 					
//	 				  		}
//  			 				rorderno 						 = StringUtil.getNo();//还款流水号
//			 				Map<String,Object> maps2 		 = new HashMap<String,Object>();
//			 				maps2.put("tenderid", tenderItem.getId());//标的ID
//			 				maps2.put("utorderno", utorderno);//投标订单号 根据具体投标记录对应还款
//			 				maps2.put("periods", i);//分期还款计划期数
//			 				maps2.put("planstatus", (short)1);//还款计划状态(1有效，2无效)
// 			 				repayMent2 						 = repayMentServiceI.findRepayMentByConditions(maps2);//分期还款计划信息
//			 	  			if(repayMent2 == null){//防止重复添加
//			 	  				if(isaintexpBoolean){//设置了标的利息管理费收取
//					  				interestExpense2 			= getInterestExpense(interestExpenses, outInfo);
// 					  				if(interestExpense2 == null){
//										hashMapResult.put("boolean", false);
//										hashMapResult.put("message", "'interestExpense2' 标的利息管理费设置对象为null");
//										return hashMapResult;
//									}
//					  				double iepercent 			=  interestExpense2.getIepercent();//利息管理费百份比
// 					   		    	double maxiefee 	 		=  interestExpense2.getMaxiefee();//该段最高利息管理收费金额
//					  	 		    double fee1 = Arith.round(Arith.mul(rpinterestCount, iepercent), 2);
// 					   		    	if(fee1 >= maxiefee){
//					   		    		ietype 					= 3;//利息管理费收取类型（1百分比，2最低，3最高）
//					   		    		fee1   					= maxiefee;
//					   		    	}
//					   		    	  interestexpense 			= Double.parseDouble(df.format(fee1));//利息管理费
// 					  		      }
//			 	  				/*************************标的分期还款计划开始***********************************/
//			 	  				RepayMent repayMent = new RepayMent();
//				 	  	  		repayMent.setRorderno(rorderno);				//还款流水号
//		 		 	  	  		repayMent.setOutaccountid(outaccountid);		//借款用户ID
//				 	  	  		repayMent.setInaccountid(inaccountid);			//投资用户ID
//				 	  	  		if(proxyaccountid != null){//防止空指针异常
// 				 	  	  			repayMent.setProxyaccountid(proxyaccountid);	//代还款人ID
//				 	  	  		}
//		 		 	  	  		repayMent.setUtorderno(utorderno);				//投标订单号 根据具体投标记录对应还款
//				 	  	  		repayMent.setTenderid(tenderItem.getId());		//标号ID
//				 	  	  		repayMent.setPeriods(i);						//还款期数（第几期）
// 				 	  	   		repayMent.setIsdarepay((short)0);				//是否债转还款(投标记录发生过债转 1是0否)
// 				 	  	  		repayMent.setRmode((short)1);					//还款模式（1人工，2系统，3线下）
// 				 	  	  		repayMent.setRptotalamount(rptotalamount);	    //当期还款总金额(真本金+类现金)
//				 	  	  		repayMent.setRptotalint(rpinterestCount);		//还款总利息(真现金利息+假现金利息+类现金利息+加息券利息)
//	 			 	  	  		repayMent.setRprincipalint(rptotalintCount);	//当期还款总本息息（总本金+总利息） 
//				 	  	  		repayMent.setRamount(ramount);					//当期还款金额（当期本金）
//				 	  	  		repayMent.setRvoucher(rvoucher);				//当期还款类现金
//				 	  	  		repayMent.setRlvoucher(rlvoucher);				//当期还款假现金
//				 	  	  		repayMent.setOverdueamount(0.00);				//当期逾期滞纳金额
//				 	  	  		repayMent.setRinterest(rinterest);				//当期还款本金利息（当期本金利息）
//				 	  	  		repayMent.setRlvoucherint(rlvoucherint);		//当期还款假现金的利息
//				 	  	  		repayMent.setRvoucherint(rvoucherint);			//当期还款类现金的利息
//				 	  	  		repayMent.setRintfee(rintfee);					//当期还款加息劵的利息
//	  			 	  	  		repayMent.setRestprincipal(restprincipal);		//剩余本金
//				 	  	  		repayMent.setRestvoucher(restvoucher);			//剩余类现金
//				 	  	  		repayMent.setRestlvoucher(restlvoucher);		//剩余假现金
//				 	  	  		repayMent.setRestocamount(0.00);				//剩余滞纳金 剩余本金产生的滞纳金
//				 	  	  		repayMent.setVrestocamount(0.00);				//剩余类现金滞纳金 剩余类现金产生的滞纳金
//				 	  	  		repayMent.setRestamountintprofit(restamountintprofit);	//剩余本金产生的利息 （原收益+剩余加息劵收益）     *  本金
//				 	  	  		repayMent.setRestvoucherintprofit(restvoucherintprofit);//剩余类现金产生的利息 （原收益+加息劵收益）    *  剩余类现金
//				 	  	  		repayMent.setRestlvoucherintprofit(restlvoucherintprofit);//剩余假现金产生的利息 （原收益+加息劵收益）*  剩余假现金
//				 	  	  		repayMent.setRestintprofit(restintprofit);		//剩余加息卷收益
//				 	  	  		repayMent.setDisableocamount(0.00);				//失效滞纳金 失效本金产生的滞纳金
//				 	  	  		repayMent.setDisablevoucher(0.00);				//失效类现金
//				 	  	  		repayMent.setDisablelvoucher(0.00);				//失效假现金
//				 	  	  		repayMent.setDisablevoucherint(0.00);			//失效类现金利息
//				 	  	  		repayMent.setDisablevocamount(0.00);			//失效类现金滞纳金 失效类现金产生的滞纳金
//				 	  	  		repayMent.setDisableintprofit(0.00);			//失效加息卷收益
//				 	  	  		repayMent.setTransferprincipal(0.00);			//已转让本金
//	   			 	  	  		repayMent.setBpenalty(0.00);					//提前还款欠收利息 提前还款
//				 	  	  		repayMent.setOverdueamount(0.00);				//逾期滞纳金额 注意是否有代偿
//				 	  	  		repayMent.setInterestexpense(interestexpense);	//投标利息的管理费 投资人—》平台
//				 	  	  		repayMent.setIsproxyrepay((short)2);			//是否代偿（1是，2否）
//				 	  	  		repayMent.setFee(interestexpense);				//还款总利息费 还款金额利息+提前还款欠收利息+逾期滞纳金额
//		  		 	  	  		repayMent.setRepaystatus((short)1);				//还款状态(1未还款，2已还款，3已提前还款，4处理中)
//		  		 	  	     	repayMent.setIsaudit(repayMentIsAudit);			//是否审核  0不需要审核 1待审核 2审核通过 3审核不通过
//				 	  	  		repayMent.setIsblending((short)0);				//是否系统勾兑（0未勾兑，1已勾兑）
//				 	  	  		repayMent.setRtime(repayday);					//还款时间
//				 	  	  		repayMent.setAddtime(new Date());  				//制表时间
//				 	  	  		repayMent.setIsmanblending((short)0);			//是否人工勾兑（0未勾兑，1已勾兑）
//				 	  	   		repayMent.setPaycompany("徽商银行");				//托管通道公司（汇付天下）
//				 	  	   		repayMent.setPlanstatus((short)1);				//还款计划状态(1有效，2无效)
//				 	  	   		repayMent.setIsoverdue((short)0);				//是否逾期 0否，1是
//				 	  	   		repayMent.setAuthcode(userTender.getAuthcode());//投标申请授权码
//				 	  	 		/*******************标的分期还款计划结束*****************************************/
//				 	  	   		int ResCount = 0;
//				 	  	   		ResCount = repayMentServiceI.insertSelective(repayMent);
//				 	  	   		if(ResCount > 0){
//				 	  	   			count++;
//				 	  	   		}
// 		 	 	  			}
//			 	  			if(isaintexpBoolean){//设置了标的利息管理费收取
// 				 	  			InterestExpenseRecord interestExpenseRecord3 = null;
//				  			    if(repayMent2 != null){
//				  			    	interestExpenseRecord3 		= interestExpenseRecordServiceI.findInterestExpenseRecordByRorderno(repayMent2.getRorderno());
//				  			    }
//				  				/**********标的利息管理费记录开始*************/
//			 					if(interestExpenseRecord3 == null){//数据库没有这条数据
//									InterestExpenseRecord interestExpenseRecord = new InterestExpenseRecord();
//									interestExpenseRecord.setIeorderno(StringUtil.getNo());							//利息管理费流水号
//									interestExpenseRecord.setRorderno(rorderno);									//还款流水号
//									if(interestExpense2 != null){
//										interestExpenseRecord.setIeid(interestExpense2.getId());					//利息管理费设置表Id  
//									}
//									interestExpenseRecord.setTenderid(tenderItem.getId());							//标号ID
//									if(interestExpense2.getIerecmanid() != null){
//			 							interestExpenseRecord.setIntexpmanid(interestExpense2.getIerecmanid());		//利息管理费收款人ID 汇付天下没有这个接口
//									}
//									interestExpenseRecord.setInvestorid(userTender.getOutaccountid());				//投资人ID
//									interestExpenseRecord.setIntexpfee(interestexpense);							//利息管理费
//									interestExpenseRecord.setIetype(ietype);										//利息管理费收取类型（1百分比，2最低，3最高）
//									interestExpenseRecord.setIsdeal((short)0);										//是否处理（0否，1是）
//									interestExpenseRecord.setMadetime(new Date());									//创建时间
//									interestExpenseRecord.setPlanstatus((short)1);									//利息管理费收取计划状态 1有效 2 无效
//				   					interestExpenseRecord.setIeproperty((short)1); 									//管理费属性 1正常投标2 债权转让后
//									interestExpenseRecordServiceI.insertSelective(interestExpenseRecord);
//								}
//								/**********标的利息管理费记录结束*************/
//			 	  			}
//	 				  }
//		 		}
//			}
//			
//			if(dayorMonthBoolean){
// 				if(userTenders.size() == count){
// 					hashMapResult.put("boolean", true);
// 					hashMapResult.put("message", "投资人还款计划生成成功");
// 					return hashMapResult;
//				}else{
//					hashMapResult.put("boolean", false);
// 					hashMapResult.put("message", "未知错误");
// 					if(repayLogger.isDebugEnabled()){
//						repayLogger.debug("生成 投资人的具体还款计划   失败 未知错误");
//					}
// 					return hashMapResult;
//				}
//	 		}else{
//	 			if(totalMonth * userTenders.size() == count){
//	 				hashMapResult.put("boolean", true);
// 					hashMapResult.put("message", "投资人还款计划生成成功");
// 					return hashMapResult;
//	 			}else{
//	 				hashMapResult.put("boolean", false);
// 					hashMapResult.put("message", "未知错误");
// 					if(repayLogger.isDebugEnabled()){
//						repayLogger.debug("生成 投资人的具体还款计划   失败 未知错误");
//					}
// 					return hashMapResult;
//	 			}
//	 		}
//			
//		}
//  		return hashMapResult;
//  	}
  	
	/**
	 * 
	* @Title: AutoGenerateRepayMentsBydebtAttornAfter
	* @Description: TODO(债权转让后重新生成 新的还款计划) 
	* @param @param tenderItemId  标的ID
	* @param @param buyCustId    债权承接人 客户号
	* @param @param sellCustId   债权转让人客户号
	* @param @param ordId  参数说明   债权转让订单号
	* @return void    返回类型  
	* @author cjm
	* @throws
	 */
	public synchronized static void AutoGenerateRepayMentsBydebtAttornAfter(BigDecimal tenderItemId,String buyCustId,String sellCustId,String ordId){
		Assert.notNull(buyCustId,  "'buyCustId'  债权承接人客户号不能为null");
		Assert.notNull(sellCustId, "'sellCustId' 债权转让人客户号不能为null");
		Assert.notNull(ordId, "'ordId' 债权转让流水号不能为null");
		Assert.notNull(tenderItemId, "'tenderItemId' 标的ID不能为null");
		String message = "";//提示
		UserTender userTender = usertenderServiceI.findUserTenderByOrderno(ordId);
		TenderItem tenderItem = tenderItemServiceI.findTenderItemById(tenderItemId);
 		Assert.notNull(tenderItem, "'tenderItem' 标的设置对象不能为null");
		Assert.notNull(userTender, "'userTender' 债权转让记录对象不能为null");
		Assert.notNull(userTender.getDadate(), "'dadate' 债权转让日期不能为null");
		Assert.notNull(userTender.getOrderno(), "'orderno' 债权转让订单号不能为null");
		Assert.notNull(userTender.getDaproperty(), "'daproperty' 债权转让债转属性不能为null");

  		UserFsAccountInfoServiceI userFsAccountInfoServiceI = SpringContextHolder.getBean(UserFsAccountInfoServiceI.class);//用户托管账户信息Service
		Assert.notNull(userFsAccountInfoServiceI, "'userFsAccountInfoServiceI' 用户托管账户信息Service 不能为null");
		UserFsAccountInfo buyCustIdInfo = userFsAccountInfoServiceI.findUserFsAccountInfoByUsrCustId(buyCustId);//债权承接人
		UserFsAccountInfo selCustIdInfo = userFsAccountInfoServiceI.findUserFsAccountInfoByUsrCustId(sellCustId);//债权转让人
		Assert.notNull(buyCustIdInfo, "'buyCustIdInfo' 债权承接人第三方托管账号信息不能为null");
		Assert.notNull(selCustIdInfo, "'selCustIdInfo' 债权转让人第三方托管账号信息不能为null");
		
 		BigDecimal buyCustIdInfoBaseId = buyCustIdInfo.getBaseid();
		BigDecimal selCustIdInfoBaseId = selCustIdInfo.getBaseid();
		Assert.notNull(buyCustIdInfoBaseId, "'buyCustIdInfoBaseId' 债权承接人第三方托管账号信息BaseId不能为null");
		Assert.notNull(selCustIdInfoBaseId, "'selCustIdInfoBaseId' 债权转让人第三方托管账号信息BaseId不能为null");
 		String Olddaorderno = userTender.getOlddaorderno();//原投标订单号 
 		ordId = userTender.getOrderno();
 		BigDecimal tenderItemID = tenderItem.getId();//标的ID
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("inaccountid", selCustIdInfoBaseId);//债权转让人
		map.put("utorderno", Olddaorderno);//原投标订单号 或 原债权转让订单号
		map.put("tenderid", tenderItemID);//标的ID
		map.put("repaystatus", (short)1);//还款状态(1未还款，2已还款，3已提前还款，4处理中)
		map.put("planstatus", (short)1);//还款计划状态(1有效，2无效)
		map.put("orderby", "periods desc");//排序asc
   		List<RepayMent> repayMents = repayMentServiceI.findListRepayMentByConditions(map);
    	if(repayMents.size() > 0){
   			AutoGenerateRepayMentUtil.RepayMentComparator repayMentComparator = new AutoGenerateRepayMentUtil().new RepayMentComparator();
  			Collections.sort(repayMents, repayMentComparator);//按期数排序后的还款计划表
  			Integer yearDay = 365;//全局日期
  			/*标的债权转让*/
  			DebtAttornServiceI attornServiceI = SpringContextHolder.getBean(DebtAttornServiceI.class);//标的债权转让设置
  			Assert.notNull(attornServiceI,"'attornServiceI' 标的债权转让设置Service不能为null");
  			DebtAttorn debtAttorn	  = attornServiceI.selectByTid(tenderItem.getId());
  			UserAccountSafeInfo selUserAccountSafeInfo = userAccountSafeInfoServiceI.selectByBaseId(selCustIdInfoBaseId);//债权转让人账号安全信息对象
  			UserAccountSafeInfo buyUserAccountSafeInfo = userAccountSafeInfoServiceI.selectByBaseId(buyCustIdInfoBaseId);//债权承接人账号安全信息对象
  			
  			Assert.notNull(selUserAccountSafeInfo, "'selUserAccountSafeInfo' 债权转让人账号安全信息对象不能为null");
  			Assert.notNull(buyUserAccountSafeInfo, "'buyUserAccountSafeInfo' 债权承接人账号安全信息对象不能为null");
  			
    		Short Intdisable = debtAttorn.getIntdisable();//增益处理（1全部失效，2按债转金额比例失效，3不作废）
   			Assert.notNull(debtAttorn, "'debtAttorn' 标的债权转让设置对象不能为null");
  			Assert.notNull(Intdisable, "'Intdisable' 标的债权转让增益处理不能为null");
//     	  	Double totalPrincipal       							= tenderItem.getTamount();//标的金额
   	  		Double yearRate   		    							= tenderItem.getTinterest();//标的年化利息(收益)
  	    	Short isaintexp 										= tenderItem.getIsaintexp();//是否设置利息管理费 1是 0否
  	  		Short  repaymentproSrt  								= tenderItem.getRepaymentpro();//标的还款方式01：一次还本付息02：等额本金03：等额本息04：按期付息到期还本99：其他
  	  		String dayormonthStr    								= tenderItem.getDayormonth();//天或月或年
  	  		Integer totalMonth    									= tenderItem.getLoantime();//标的借款周期
  	  		BigDecimal proxyaccountid								= tenderItem.getCompensatorymaid();//代还人ID
   	   		Date   valueDate										= tenderItem.getValuedate();//标的起息日
  			Date   Valuedate										= tenderItem.getValuedate();//截标日期
  	  		String Valuepoint      									= tenderItem.getValuepoint(); //起息日时间点
  			Short repayMentType										= tenderItem.getRepaymenttype();//还款类型（1及时，2冻结还款）
  	  	    Assert.notNull(repayMentType, "'repayMentType 还款类型不能为null'");
  			Short repayMentIsAudit = (short)(repayMentType == 1 ? 2 : 0);//是否审核 0待审核 1客服审核中 2审核通过 3审核不通过 
  	  	    Short  Valuerule        								= tenderItem.getValuerule();//起息规则1.结标日当天,2.结标日次日,3.结标日固定时间之前,4.结标日固定时间之后
  	  	    Date   retdate  										= StringUtil.getValuedate(Valuedate, Valuepoint, Valuerule);//起息日
  	   		Assert.notNull(yearRate, "'yearRate' 标的年化利息(收益)不能为null");
   	   		Assert.notNull(isaintexp, "'isaintexp' 是否设置利息管理费不能为null");
  	   		Assert.notNull(repaymentproSrt, "'repaymentproSrt' 标的还款方式不能为null");
  	   		Assert.notNull(dayormonthStr, "'dayormonthStr' 标的借款周期类型天或月或年不能为null");
  	   		Assert.notNull(totalMonth, "'totalMonth' 标的借款周期不能为null");
  	   		Assert.notNull(retdate, "'retdate' 首次还款日期不能为null");
  	   		Assert.notNull(valueDate, "'valueDate' 标的起息日不能为null");    	
  	     	Double utprinamount										= userTender.getUtprinamount();//债权转让本金 
  	     	Double utintamount										= userTender.getUtintamount();//债权承接利息
  	     	Double restamount										= userTender.getRestamount();//剩余金额
  	     	Date   debtDate											= userTender.getDadate();
    	    Assert.notNull(utprinamount, "'utprinamount' 债权转让债转金额不能为null");
   	        Assert.notNull(utintamount, "'utintamount' 债权转让承接利息不能为null");
   	        Assert.notNull(restamount, "'restamount' 债权转让剩余金额不能为null");
     	    List<InterestExpense> interestExpenses 					= null;//利息管理设置
 	  	   	InterestExpense buyinterestExpense2 					= null;//债权承接人利息管理费收取
	  	   	InterestExpense selinterestExpense2 					= null;//债权转让人利息管理费收取
			UserInterestRateCoupon  userInterestRateCoupon 			= null;//用户使用加息券对象
			Double rptotalintCount									= 0.00;//还款本息总和(真本金+类现金+真本金利息+假现金利息+类现金利息+加息券利息)
			Double interestCount									= 0.00;//还款利息总和(真本金利息+假现金利息+类现金利息+加息券利息)
			Double rptotalamountCount								= 0.00;//还款本金总和(真本金+类现金)
			Double rptotalamount									= 0.00;//当期还款总金额(真本金+类现金)	
			Double rptotalint										= 0.00;//当期还款总利息	(真现金利息+假现金利息+类现金利息+加息券利息)	
			Double ontRptotalintCount								= 0.00;//当期还款本息	 	
 	 		Double icrateCount		   								= 0.00;//加息券利率总和
			Double rinterestCount									= 0.00;//真现金的利息总和
			Double rlvoucherintCount								= 0.00;//假现金的利息总和
			Double rvoucherintCount									= 0.00;//类现金的利息总和
			Double rintfeeCount										= 0.00;//加息劵利息总和
	 		Double ramount											= 0.00;//当期还款真现金
			Double rlvoucher										= 0.00;//当期还款假现金
			Double rvoucher											= 0.00;//当期还款类现金
	  		Double rinterest										= 0.00;//当期还款真现金的利息
			Double rlvoucherint										= 0.00;//当期还款假现金的利息
			Double rvoucherint										= 0.00;//当期还款类现金的利息
			Double rintfee											= 0.00;//当期加息卷的利息
	 	    Double restprincipal									= 0.00;//剩余本金
			Double restvoucher										= 0.00;//剩余类现金
			Double restlvoucher										= 0.00;//剩余假现金
	 		Double restamountintprofit								= 0.00;//剩余本金产生的利息 （原收益+剩余加息劵收益）*本金
			Double restvoucherintprofit								= 0.00;//剩余类现金产生的利息 （原收益+加息劵收益）*剩余类现金
			Double restlvoucherintprofit							= 0.00;//剩余假现金产生的利息 （原收益+加息劵收益）*剩余假现金
			Double restintprofit									= 0.00;//剩余加息卷收益的利息
			Double disablevoucher									= 0.00;//失效类现金
			Double disablelvoucher									= 0.00;//失效假现金
			Double disableocamount									= 0.00;//失效滞纳金 失效本金产生的滞纳金
			Double disablevocamount									= 0.00;//失效类现金滞纳金 失效类现金产生的滞纳金
			Double disableintprofit									= 0.00;//失效加息卷收益
			Double disablevoucherint								= 0.00;//失效类现金利息
			Double equalProportion								    = 0.00;//等比例  债权金额 / 剩余本金
  			Double buyinterestexpense 								= 0.00;//债权承接人利息管理费
			Double selinterestexpense 								= 0.00;//债权转让利息管理费
			Double selcountInterestexpense 							= 0.00;//转让人总利息管理费
			Double buycountInterestexpense 							= 0.00;//承接人总利息管理费
			Double buyRinterest 									= 0.00;//债权承接人利息
	  		Double buyRamount   									= 0.00;//债权承接人本金
  			Double buyRestamountintprofit 							= 0.00;//债权承接人剩余本金产生的利息
  			Double buyRestprincipal    								= 0.00;//债权承接人剩余本金
  			Double buyRptotalintCount								= 0.00;
  			Double buyinterestexpenseAdd							= 0.00;
  			Double selinterestexpenseAdd							= 0.00;
  			
			boolean isClassEnvelopeBoolean							= false;//是否使用了类现金 false 没有使用
			boolean isFalseEnvelopeBoolean							= false;//是否使用了假现金 false 没有使用
			boolean isIcrateBoolean									= false;//是否使用了加息券 false 没有使用
  	   		boolean isaintexpBoolean 								= false;//是否设置利息管理费 默认不是
   	   		boolean dayorMonthBoolean 								= false;//还款计划是否是一期 默认不是
  	   		boolean lasePeriodBoolean 								= false;//是否最后一期 默认不是
  	   		boolean isDebtAttornBoolean 							= false;//是否全部债权转让 默认不是
   	   		Short buygietype 										= 1;//债权承接人利息管理费收取类型（1百分比，2最低，3最高）
  	   		DecimalFormat df 										= new DecimalFormat("################0.00");//格式化金额
  	   		Short buyIetype											= 1;//利息管理费收取类型 1百分比 2 最低 3最高
  	   		Short selIetype											= 1;//利息管理费收取类型 1百分比 2 最低 3最高
  	   		RepayMent repayMent2 = null;
  	   		int scale = 2;
  	  		if(isaintexp.equals((short)1)){//设置了利息管理收费
  	  			InterestExpense condition = new InterestExpense();
  	  			condition.setTid(tenderItemId);
  	   			interestExpenses = interestExpenseServiceI.selectByCondition(condition);
   	   			Assert.notNull(interestExpenses, "'interestExpenses' 标的利息管理费不能为null");
  				isaintexpBoolean = true;//设置利息管理费
  			}
  	  	    if(dayormonthStr.equals("年")){
				totalMonth = tenderItem.getLoantime();
				totalMonth = totalMonth * 12;
			}else if(dayormonthStr.equals("天")){//借款周期为天时 生成还款计划为一天
				dayorMonthBoolean = true;
			}
			
			if(repaymentproSrt.equals((short)1)){//借款类型是一次性还本付息时 生成还款计划为一期
				dayorMonthBoolean = true;
			}
			
			if(restamount == 0){//判断是否是全部债权转让  剩余本金为0 全部债权转让
				isDebtAttornBoolean	= true;
			}
 			RepayMent repayMent = repayMents.get(0);//按期数最少排序后的还款计划  如 ： 还款期数有 1,2,3,4,5,6 则是1
 			Assert.notNull(repayMent, "'repayMent' 还款期数不能为null");
			if(repayMent.getRlvoucher() > 0.00){//使用了假现金
				isFalseEnvelopeBoolean = true;
			}
			if(repayMent.getRvoucher() > 0.00){//使用了类现金
				isClassEnvelopeBoolean = true;
			}
			if(repayMent.getRintfee() > 0.00){//使用加息劵
				isIcrateBoolean = true;
			}
			if(userTender.getDaproperty().equals((short)1)){//正常债权转让
				if(dayorMonthBoolean){//还款计划只有一期
					if(repayMents.size() > 1){
	   					throw new IllegalArgumentException("还款具体计划和标的还款方式不一致！！！");
	   				}
					if(utprinamount > repayMent.getRamount()){
						throw new IllegalArgumentException("债权转让金额超出债权转让人可转让金额");
					}
		   			Map<String,Object> maps = new HashMap<String,Object>();
	    			maps.put("utorderno", ordId);
	    			maps.put("planstatus", (short)1);//是否有效
 	   				repayMent2 = repayMentServiceI.findRepayMentByConditions(maps);
	   				if(repayMent2 == null){//生成新的还款计划
	   					Assert.notNull(repayMent.getOutaccountid(), "'repayMent.getOutaccountid()' 借款用户ID不能为null");
	   					Assert.notNull(buyCustIdInfoBaseId, 		"'buyCustIdInfoBaseId' 投资用户ID不能为null");
		   				Assert.notNull(repayMent.getUtorderno(), "'repayMent.getUtorderno()' 投标订单号不能为null");
	   					Assert.notNull(repayMent.getTenderid(), "'repayMent.getTenderid()' 标号ID不能为null");
	   					Assert.notNull(repayMent.getPeriods(), "'repayMent.getPeriods()' 还款期数不能为null");
	   					Assert.notNull(repayMent.getRprincipalint(), "'repayMent.getRprincipalint()' 还款金额（本息)不能为null");
	   					Assert.notNull(repayMent.getRamount(), "'repayMent.getRamount()' 还款金额（本金）不能为null");
	   					Assert.notNull(repayMent.getRinterest(), "'repayMent.getRinterest()' 还款金额（利息）不能为null");
	   					Assert.notNull(repayMent.getRtime(), "'repayMent.getRtime()' 还款时间不能为null");
	   					Assert.notNull(repayMent.getRestprincipal(), "'repayMent.getRestprincipal()' 剩余本金不能为null");
	   					equalProportion		= utprinamount / repayMent.getRamount();//等比例
  						ramount				= utprinamount;//当期还款真现金
 						interestCount		= Double.valueOf(df.format(equalProportion * repayMent.getRinterest()));//当期还款总利息（本金利息）  = 债权转让金额 / 转让人当期还款总金额 * 当期还款利息
 						rptotalintCount 	= Double.valueOf(df.format(ramount + interestCount));//当期还款总本息 = 当期还款总利息 + 债权转让金额
 						if(isaintexpBoolean){//设置了利息管理费收取  承接人利息管理费
			  	  			buyinterestExpense2 = getInterestExpense(interestExpenses, buyUserAccountSafeInfo);
			  	  			Assert.notNull(buyinterestExpense2, "'buyinterestExpense2' 债权承接人标的利息管理费设置对象不能null");
			  	  			double buyiepercent =  buyinterestExpense2.getIepercent();//利息管理费百份比
 			  	  			double buymaxiefee  =  buyinterestExpense2.getMaxiefee();//该段最高利息管理收费金额
			  	   			double buyfee1 = Arith.round(Arith.mul(interestCount, buyiepercent), 2);//利息计算  利息*百分比
			  	   			Assert.notNull(buyiepercent, "'buyiepercent' 债权承接人利息管理费百份比不能为null");
 			  		   		Assert.notNull(buymaxiefee, "'buymaxiefee' 债权承接人该段最高利息管理收费金额不能为null");
			  		   		Assert.notNull(buyfee1, "'buyfee1' 债权承接人利息不能为null");
 			  	  			if(buyfee1 >= buymaxiefee){
			  	  				buygietype = 3;//利息管理费收取类型（1百分比，2最低，3最高）
			  	  				buyfee1 = buymaxiefee;
			  	  			}
			  	  			buyinterestexpense = Double.parseDouble(df.format(buyfee1));//利息管理费
				  	  	}
 						/*债权承接人的还款计划*/
	    				RepayMent repayMent3 = new RepayMent();
		   				repayMent3.setRorderno(StringUtil.getNo());//还款流水号
 		 	  	  		repayMent3.setOutaccountid(repayMent.getOutaccountid());//借款用户ID
		 	  	  		repayMent3.setInaccountid(buyCustIdInfoBaseId);//投资用户ID
		 	  	  		if(repayMent.getProxyaccountid() != null){//防止空指针异常
			 	  	  		repayMent3.setProxyaccountid(repayMent.getProxyaccountid());//代还款人ID
		 	  	  		}
 		 	  	  		repayMent3.setUtorderno(ordId);//投标订单号 根据具体投标记录对应还款
		 	  	  		repayMent3.setTenderid(tenderItem.getId());//标号ID
		 	  	  		repayMent3.setPeriods(1);//还款期数（第几期）
		 	  	   		repayMent3.setIsdarepay((short)1);//是否债转还款(投标记录发生过债转 1是0否)
		 	  	  		repayMent3.setRmode((short)1);//还款模式（1人工，2系统，3线下）
		 	  	  		repayMent3.setRptotalamount(ramount);//还款总金额(真本金+类现金)
		 	  	  		repayMent3.setRptotalint(interestCount);//当期还款总利息(当期真现金利息+当期假现金利息+当期类现金利息+当期加息券利息)
			 	  	  	repayMent3.setRprincipalint(rptotalintCount);//当期还款总本息（总本金+总利息） 
		 	  	  		repayMent3.setRamount(ramount);//当期还款金额（当期本金）
		 	  	  		repayMent3.setRvoucher(0.00);//当期还款类现金
		 	  	  		repayMent3.setRlvoucher(0.00);//当期还款假现金
		 	  	  		repayMent3.setOverdueamount(0.00);//当期逾期滞纳金额
		 	  	  		repayMent3.setRinterest(interestCount);//当期还款本金利息（当期本金利息）
		 	  	  		repayMent3.setRlvoucherint(0.00);//当期还款假现金的利息
		 	  	  		repayMent3.setRvoucherint(0.00);//当期还款类现金的利息
		 	  	  		repayMent3.setRintfee(0.00);//当期还款加息劵的利息
			 	  	  	repayMent3.setRestprincipal(0.00);//剩余本金
		 	  	  		repayMent3.setRestvoucher(0.00);//剩余类现金
		 	  	  		repayMent3.setRestlvoucher(0.00);//剩余假现金
		 	  	  		repayMent3.setRestocamount(0.00);//剩余滞纳金 剩余本金产生的滞纳金
		 	  	  		repayMent3.setVrestocamount(0.00);//剩余类现金滞纳金 剩余类现金产生的滞纳金
		 	  	  		repayMent3.setRestamountintprofit(0.00);//剩余本金产生的利息 （原收益+剩余加息劵收益）     *  本金
		 	  	  		repayMent3.setRestvoucherintprofit(0.00);//剩余类现金产生的利息 （原收益+加息劵收益）    *  剩余类现金
		 	  	  		repayMent3.setRestlvoucherintprofit(0.00);//剩余假现金产生的利息 （原收益+加息劵收益）*  剩余假现金
		 	  	  		repayMent3.setRestintprofit(0.00);//剩余加息卷收益
		 	  	  		repayMent3.setDisableocamount(0.00);//失效滞纳金 失效本金产生的滞纳金
		 	  	  		repayMent3.setDisablevoucher(0.00);//失效类现金
		 	  	  		repayMent3.setDisablelvoucher(0.00);//失效假现金
		 	  	  		repayMent3.setDisablevoucherint(0.00);//失效类现金利息
		 	  	  		repayMent3.setDisablevocamount(0.00);//失效类现金滞纳金 失效类现金产生的滞纳金
		 	  	  		repayMent3.setDisableintprofit(0.00);//失效加息卷收益
		 	  	  		repayMent3.setTransferprincipal(0.00);//已转让本金
			 	  	  	repayMent3.setBpenalty(0.00);//提前还款欠收利息 提前还款
		 	  	  		repayMent3.setOverdueamount(0.00);//逾期滞纳金额 注意是否有代偿
		 	  	  		repayMent3.setInterestexpense(buyinterestexpense);//投标利息的管理费 投资人—》平台
		 	  	  		repayMent3.setIsproxyrepay((short)0);//是否代偿（1是，0否）
		 	  	  		repayMent3.setFee(buyinterestexpense);//还款总利息费 还款金额利息+提前还款欠收利息+逾期滞纳金额
  		 	  	  		repayMent3.setRepaystatus((short)1);//还款状态(1未还款，2已还款，3已提前还款，4处理中)
  		 	  	     	repayMent3.setIsaudit(repayMentIsAudit);//是否审核  0不需要审核 1待审核 2审核通过 3审核不通过
		 	  	  		repayMent3.setIsblending((short)0);//是否系统勾兑（0未勾兑，1已勾兑）
		 	  	  		repayMent3.setRtime(repayMent.getRtime());//还款时间
		 	  	  		repayMent3.setAddtime(new Date());  				//制表时间
		 	  	  		repayMent3.setIsmanblending((short)0);//是否人工勾兑（0未勾兑，1已勾兑）
		 	  	   		repayMent3.setPaycompany("汇付天下");//托管通道公司（汇付天下）
		 	  	   		repayMent3.setIsdarepay((short)1);/*是否债转还款(投标记录发生过债转 1是0否)*/
		 	  	   		repayMent3.setPlanstatus((short)1);	//还款计划状态(1有效，2无效)
		 	  	 		/*******************标的分期还款计划结束*****************************************/
	   					repayMentServiceI.insertSelective(repayMent3);
	   					/*债权承接人的还款计划结束*/
	   					
	   				    //作废债权转让人原还款计划
	   					repayMent.setPlanstatus((short)2); /*还款计划状态(1有效，2无效)*/
	   					repayMentServiceI.updateById(repayMent);
	   					
	   					/**********标的利息管理费记录开始*************/
	   					//作废原利息管理费记录
	   					InterestExpenseRecord expenseRecord = interestExpenseRecordServiceI.findInterestExpenseRecordByRorderno(repayMent.getRorderno());
						expenseRecord.setPlanstatus((short)2);/*利息管理费收取计划状态 1有效 2 无效*/
 	   					interestExpenseRecordServiceI.updateById(expenseRecord);
	    				    
	   					/*生成债权承接人新的利息管理费记录 开始*/
	   					InterestExpenseRecord interestExpenseRecord = new InterestExpenseRecord();
	   					interestExpenseRecord.setIeorderno(StringUtil.getNo());//利息管理费流水号
	   					interestExpenseRecord.setRorderno(repayMent3.getRorderno());//还款流水号
	   					if(buyinterestExpense2 != null){
	   						interestExpenseRecord.setIeid(buyinterestExpense2.getId());//利息管理费设置表Id  
	   					}
	   					interestExpenseRecord.setTenderid(tenderItem.getId());//标号ID
	   					if(buyinterestExpense2.getIerecmanid() != null){
	   						interestExpenseRecord.setIntexpmanid(buyinterestExpense2.getIerecmanid());//利息管理费收款人ID 汇付天下没有这个接口
	   					}
	   					interestExpenseRecord.setInvestorid(buyCustIdInfoBaseId);//投资人ID
	   					interestExpenseRecord.setIntexpfee(buyinterestexpense);//利息管理费
	   					interestExpenseRecord.setIetype(buygietype);//利息管理费收取类型（1百分比，2最低，3最高）
	   					interestExpenseRecord.setIsdeal((short)0);//是否处理（0否，1是）
	   					interestExpenseRecord.setMadetime(new Date());//创建时间
	   					interestExpenseRecord.setPlanstatus((short)1);/*利息管理费收取计划状态 1有效 2 无效*/
	   					interestExpenseRecord.setIeproperty((short)1); /*管理费属性 1正常投标2 债权转让后*/
	   					interestExpenseRecordServiceI.insertSelective(interestExpenseRecord);
	   					/*生成债权承接人新的利息管理费记录 结束*/
		   					/**********标的利息管理费记录结束*************/
 	   					ramount				= Double.valueOf(df.format(repayMent.getRamount() - utprinamount + 0.00));//当期还款真现金
	   					if(isClassEnvelopeBoolean || isFalseEnvelopeBoolean || !(ramount == 0.00)){//使用了加息券或类现金或假现金
	   						if(isFalseEnvelopeBoolean){//使用了假现金
	   							rlvoucher = repayMent.getRlvoucher();//当期还款假现金
	   							rlvoucherint = repayMent.getRlvoucherint();//当期还款假现金的利息
	   						}
	   						
	   						if(isClassEnvelopeBoolean){//使用了类现金
	   							rvoucher = repayMent.getRvoucher();//当期还款类现金
	   							rvoucherint = repayMent.getRvoucherint();//当期还款类现金的利息
	   						}
	   						
	   						if(isIcrateBoolean){//使用加息劵
	   							rintfee = repayMent.getRintfee();//当期加息卷的利息
		   					}
	   						
	   						if(Intdisable.equals((short)1)){//1全部失效       	增益处理（1全部失效，2按债转金额比例失效，3不作废）
	   							if(isClassEnvelopeBoolean){//类现金
 	   								disablevoucher		= repayMent.getRvoucher();//失效类现金
	   								disablevocamount	= 0.00;//失效类现金滞纳金 失效类现金产生的滞纳金
	   								disablevoucherint	= repayMent.getRvoucherint();//失效类现金利息
	   								rvoucherint			= 0.00;//当期还款类现金的利息
	   								rvoucher			= 0.00;//当期还款类现金
	   							}
	   							if(isFalseEnvelopeBoolean){//假现金
 	   								disablelvoucher		= repayMent.getRlvoucher();//失效假现金
	   								rlvoucherint	 	= 0.00;//当期还款假现金的利息
	   								rlvoucher 			= 0.00;//当期还款假现金
	   							}
	   							if(isIcrateBoolean){//加息卷
	   								rintfee				= 0.00;//当期加息卷的利息
 	   								disableintprofit	= repayMent.getRintfee();//失效加息卷收益
	   							}
	   							disableocamount		= 0.00;//失效滞纳金 失效本金产生的滞纳金
 		   					}else if(Intdisable.equals((short)2)){//2按债转金额比例失效   等比例equalProportion
 		   						if(isClassEnvelopeBoolean){//类现金
 		   							rvoucher			= Double.valueOf(df.format((repayMent.getRvoucher() - repayMent.getRvoucher() * equalProportion) + 0.00 ));//当期还款类现金
 		   							rvoucherint			= Double.valueOf(df.format((repayMent.getRvoucherint() - repayMent.getRvoucherint() * equalProportion) + 0.00));//当期还款类现金的利息
 		   							disablevoucherint	= Double.valueOf(df.format((repayMent.getRvoucherint() * equalProportion) + 0.00 + repayMent.getDisablevoucherint()));//失效类现金利息
 		   							disablevoucher		= Double.valueOf(df.format((repayMent.getRvoucher() * equalProportion) + 0.00 + repayMent.getDisablevoucher()));//失效类现金
  		   						}
 		   						if(isFalseEnvelopeBoolean){//假现金
 		   							rlvoucher 			= Double.valueOf(df.format((repayMent.getRlvoucher() - repayMent.getRlvoucher() * equalProportion) + 0.00));//当期还款假现金
 		   							rlvoucherint	 	= Double.valueOf(df.format((repayMent.getRlvoucherint() - repayMent.getRlvoucherint() * equalProportion) + 0.00));//当期还款假现金的利息
 		   							disablelvoucher		= Double.valueOf(df.format((repayMent.getRlvoucher() * equalProportion) + 0.00 + repayMent.getDisablelvoucher()));//失效假现金
 		   						}
 		   						if(isIcrateBoolean){//加息卷
  		   							rintfee 		= Double.valueOf(df.format(((rlvoucher + rvoucher + ramount) / (rlvoucher + rvoucher + repayMent.getRamount()) * rintfee) + 0.00));//当期加息卷的利息
  		   							disableintprofit	= Double.valueOf(df.format(repayMent.getRintfee() - rintfee + 0.00 + repayMent.getDisableintprofit()));//失效加息卷收益
 		   						}
 		   							disableocamount		= 0.00;//失效滞纳金 失效本金产生的滞纳金
 		   							disablevocamount	= 0.00;//失效类现金滞纳金 失效类现金产生的滞纳金
 		   					}else if(Intdisable.equals((short)3)){//3不作废
 		   						if(isClassEnvelopeBoolean){//类现金
 		   							rvoucher			= repayMent.getRvoucher();//当期还款类现金
 		   							rvoucherint			= repayMent.getRvoucherint();//当期还款类现金的利息
 		   							disablevoucher		= 0.00;//失效类现金
 		   							disablevoucherint	= 0.00;//失效类现金利息
  		   						}
 		   						if(isFalseEnvelopeBoolean){//假现金
 		   							rlvoucher 			= repayMent.getRlvoucher();//当期还款假现金
 		   							rlvoucherint	 	= repayMent.getRvoucherint();//当期还款假现金的利息
 		   							disablelvoucher		= 0.00;//失效假现金
 		   						}
 		   						if(isIcrateBoolean){//加息卷
 		   							disableintprofit	= 0.00;//失效加息卷收益
  		   						}
 		   						disableocamount		= 0.00;//失效滞纳金 失效本金产生的滞纳金
 	   							disablevocamount	= 0.00;//失效类现金滞纳金 失效类现金产生的滞纳金
 		   					}
 	 						interestCount		= Double.valueOf(df.format((ramount / repayMent.getRamount() * repayMent.getRinterest()) + 0.00));//当期还款本金利息（本金利息）  = 债权转让人剩余金额 / 转让人当期还款总金额 * 当期还款利息
 	   						rptotalint 			= Double.valueOf(df.format(rintfee + rlvoucherint + rvoucherint + interestCount + 0.00));//当期还款总利息
 	   						rptotalintCount 	= Double.valueOf(df.format(ramount + rptotalint + 0.00));//当期还款总本息
 	   					    rptotalamountCount  = Double.valueOf(df.format(rvoucher + ramount + 0.00));//当期还款总金额 类现金 +真本金
 		   					if(isaintexpBoolean){//设置了利息管理费收取  承接人利息管理费
				  	  			selinterestExpense2 = getInterestExpense(interestExpenses, selUserAccountSafeInfo);
				  	  			Assert.notNull(selinterestExpense2, "'selinterestExpense2' 债权承接人标的利息管理费设置对象不能null");
				  	  			double seliepercent =  selinterestExpense2.getIepercent();//利息管理费百份比
 				  	  			double selmaxiefee  =  selinterestExpense2.getMaxiefee();//该段最高利息管理收费金额
				  	   			double selfee1 = Arith.round(Arith.mul(rptotalint, seliepercent), 2);//利息计算  利息*百分比
				  	   			Assert.notNull(seliepercent, "'seliepercent' 债权承接人利息管理费百份比不能为null");
 				  		   		Assert.notNull(selmaxiefee, "'selmaxiefee' 债权承接人该段最高利息管理收费金额不能为null");
				  		   		Assert.notNull(selfee1, "'selfee1' 债权承接人利息不能为null");
 				  	  			if(selfee1 >= selmaxiefee){
				  	  				selIetype = 3;//利息管理费收取类型（1百分比，2最低，3最高）
				  	  				selfee1 = selmaxiefee;
				  	  			}
				  	  			selinterestexpense = Double.parseDouble(df.format(seliepercent));//利息管理费
 				  	  		 }
  		   					/*债权转让人的还款计划开始*/
	   						RepayMent repayMent4 = new RepayMent();
	   						repayMent4.setRorderno(StringUtil.getNo());//还款流水号
	   						repayMent4.setOutaccountid(repayMent.getOutaccountid());//借款用户ID
	   						repayMent4.setInaccountid(selCustIdInfoBaseId);//投资用户ID
	   						if(repayMent.getProxyaccountid() != null){//防止空指针异常
	   							repayMent4.setProxyaccountid(repayMent.getProxyaccountid());//代还款人ID
	   						}
	   						repayMent4.setUtorderno(Olddaorderno);//投标订单号 根据具体投标记录对应还款
	   						repayMent4.setTenderid(tenderItem.getId());//标号ID
	   						repayMent4.setPeriods(1);//还款期数（第几期）
	   						repayMent4.setIsdarepay((short)1);//是否债转还款(投标记录发生过债转 1是0否)
	   						repayMent4.setRmode((short)1);//还款模式（1人工，2系统，3线下）
	   						repayMent4.setRptotalamount(rptotalamountCount);//还款总金额(真本金+类现金)
	   						repayMent4.setRptotalint(rptotalint);//当期还款总利息(当期真现金利息+当期假现金利息+当期类现金利息+当期加息券利息)
	   						repayMent4.setRprincipalint(rptotalintCount);//当期还款总本息（总本金+总利息） 
	   						repayMent4.setRamount(ramount);//当期还款金额（当期本金）
	   						repayMent4.setRvoucher(rvoucher);//当期还款类现金
	   						repayMent4.setRlvoucher(rlvoucher);//当期还款假现金
	   						repayMent4.setOverdueamount(0.00);//当期逾期滞纳金额
	   						repayMent4.setRinterest(interestCount);//当期还款本金利息（当期本金利息）
	   						repayMent4.setRlvoucherint(rlvoucherint);//当期还款假现金的利息
	   						repayMent4.setRvoucherint(rvoucherint);//当期还款类现金的利息
	   						repayMent4.setRintfee(rintfee);//当期还款加息劵的利息
	   						repayMent4.setRestprincipal(0.00);//剩余本金
	   						repayMent4.setRestvoucher(0.00);//剩余类现金
	   						repayMent4.setRestlvoucher(0.00);//剩余假现金
	   						repayMent4.setRestocamount(0.00);//剩余滞纳金 剩余本金产生的滞纳金
	   						repayMent4.setVrestocamount(0.00);//剩余类现金滞纳金 剩余类现金产生的滞纳金
	   						repayMent4.setRestamountintprofit(0.00);//剩余本金产生的利息 （原收益+剩余加息劵收益）     *  本金
	   						repayMent4.setRestvoucherintprofit(0.00);//剩余类现金产生的利息 （原收益+加息劵收益）    *  剩余类现金
	   						repayMent4.setRestlvoucherintprofit(0.00);//剩余假现金产生的利息 （原收益+加息劵收益）*  剩余假现金
	   						repayMent4.setRestintprofit(0.00);//剩余加息卷收益
	   						repayMent4.setDisableocamount(0.00);//失效滞纳金 失效本金产生的滞纳金
	   						repayMent4.setDisablevoucher(disablevoucher);//失效类现金
	   						repayMent4.setDisablelvoucher(disablelvoucher);//失效假现金
	   						repayMent4.setDisablevocamount(0.00);//失效类现金滞纳金 失效类现金产生的滞纳金
	   						repayMent4.setDisableintprofit(disableintprofit);//失效加息卷收益  
	   						repayMent4.setDisablevoucherint(disablevoucherint);//失效类现金收益  
 	   						repayMent4.setTransferprincipal(0.00);//已转让本金
	   						repayMent4.setBpenalty(0.00);//提前还款欠收利息 提前还款
	   						repayMent4.setOverdueamount(0.00);//逾期滞纳金额 注意是否有代偿
	   						repayMent4.setInterestexpense(selinterestexpense);//投标利息的管理费 投资人—》平台
	   						repayMent4.setIsproxyrepay((short)0);//是否代偿（1是，0否）
	   						repayMent4.setFee(selinterestexpense);//还款总利息费 还款金额利息+提前还款欠收利息+逾期滞纳金额
	   						repayMent4.setRepaystatus((short)1);//还款状态(1未还款，2已还款，3已提前还款，4处理中)
	   						repayMent4.setIsaudit(repayMentIsAudit);//是否审核  0不需要审核 1待审核 2审核通过 3审核不通过
	   						repayMent4.setIsblending((short)0);//是否系统勾兑（0未勾兑，1已勾兑）
	   						repayMent4.setRtime(repayMent.getRtime());//还款时间
	   						repayMent4.setIsmanblending((short)0);//是否人工勾兑（0未勾兑，1已勾兑）
	   						repayMent4.setPaycompany("汇付天下");//托管通道公司（汇付天下）
	   						repayMent4.setPlanstatus((short)1);	//还款计划状态(1有效，2无效)
	   						/*******************标的分期还款计划结束*****************************************/
	   						repayMentServiceI.insertSelective(repayMent4);
 	   						
 		   					InterestExpenseRecord interestExpenseRecord2 = new InterestExpenseRecord();
		   					interestExpenseRecord2.setIeorderno(StringUtil.getNo());//利息管理费流水号
		   					interestExpenseRecord2.setRorderno(repayMent4.getRorderno());//还款流水号
		   					if(buyinterestExpense2 != null){
		   						interestExpenseRecord2.setIeid(selinterestExpense2.getId());//利息管理费设置表Id  
		   					}
		   					interestExpenseRecord2.setTenderid(tenderItem.getId());//标号ID
		   					if(buyinterestExpense2.getIerecmanid() != null){
		   						interestExpenseRecord2.setIntexpmanid(buyinterestExpense2.getIerecmanid());//利息管理费收款人ID 汇付天下没有这个接口
		   					}
		   					interestExpenseRecord2.setInvestorid(selCustIdInfoBaseId);//投资人ID
		   					interestExpenseRecord2.setIntexpfee(selinterestexpense);//利息管理费
		   					interestExpenseRecord2.setIetype(selIetype);//利息管理费收取类型（1百分比，2最低，3最高）
		   					interestExpenseRecord2.setIsdeal((short)0);//是否处理（0否，1是）
		   					interestExpenseRecord2.setMadetime(new Date());//创建时间
		   					interestExpenseRecord2.setPlanstatus((short)1);/*利息管理费收取计划状态 1有效 2 无效*/
		   					interestExpenseRecord2.setIeproperty((short)1); /*管理费属性 1正常投标2 债权转让后*/
		   					interestExpenseRecordServiceI.insertSelective(interestExpenseRecord2);
	   					}
 		   			}
				}else{//多期还款计划
 					Double onePeriodPrincipal = Double.valueOf(df.format(repayMent.getRamount() + repayMent.getRestprincipal() + 0.00));//债权转让人待收本金
					Double currentPrincipal	  = Double.valueOf(df.format(onePeriodPrincipal - utprinamount + 0.00)) ;//债权转让人剩余本金
					Double K = new BigDecimal(Double.toString(utprinamount))
							.divide(new BigDecimal(Double.toString(onePeriodPrincipal)), 10,BigDecimal.ROUND_DOWN).doubleValue();//转让占剩余本金比例
					if(utprinamount > onePeriodPrincipal){
						throw new IllegalArgumentException("债权转让金额超出可债权转让金额");
					}
				  int repayMentSize = repayMents.size();//剩余期数
				  Double buyRinterestCount = 0.00;//债权承接人总利息
				  Double selRinterestCount = 0.00;//债权承接人总利息
 				  if(repaymentproSrt.equals((short)2) && !dayorMonthBoolean){//等额本金
					  buyRinterestCount							= FixedBasisMortgageUtil.getInterestCount(utprinamount, repayMentSize, yearRate, scale);//还款真现金总利息
					  selRinterestCount							= FixedBasisMortgageUtil.getInterestCount(currentPrincipal, repayMentSize, yearRate, scale);//还款真现金总利息
 				  }else if(repaymentproSrt.equals((short)3) && !dayorMonthBoolean){//等额本息
					  buyRinterestCount							= FixedPaymentMortgageUtil.getMonthlyPayInterestCount(utprinamount, yearRate, repayMentSize, scale);//还款真现金总利息	
					  selRinterestCount							= FixedPaymentMortgageUtil.getMonthlyPayInterestCount(currentPrincipal, yearRate, repayMentSize, scale);//还款真现金总利息	
				  }else if(repaymentproSrt.equals((short)4) || dayorMonthBoolean){//按期付息到期还本 
					  buyRinterestCount							= OneTimeServicingUtil.getInterestCount(utprinamount, repayMentSize, yearRate, scale);//还款真现金总利息
					  selRinterestCount							= OneTimeServicingUtil.getInterestCount(currentPrincipal, repayMentSize, yearRate, scale);//还款真现金总利息
				  }
   		  		  for(RepayMent ment : repayMents){
  	   		  			if(totalMonth - ment.getPeriods() == 0){//最后一期
	   		  				lasePeriodBoolean = true;
	   		  			}
 	   		  		    int j 	= ment.getPeriods() - (totalMonth - repayMentSize);//期数
  		  				if(currentPrincipal > 0){//债权转让人还有剩余本金
  		  					isDebtAttornBoolean = false;//全部债权转让
  		  						/*计算债权承接人的利息 ,本金,剩余利息，剩余本金*/
    		  				if(repaymentproSrt.equals((short)2)){//标的还款方式01：一次还本付息02：等额本金03：等额本息04：按期付息到期还本99：其他
   		  						Map<Integer,BigDecimal> rinterestMap 	= FixedBasisMortgageUtil.getMonthInterest(utprinamount, repayMentSize, yearRate, scale);//真现金每月还款利息
   		  						buyRinterest  							= rinterestMap.get(j).doubleValue();//真现金每月还款利息
   		  						if(lasePeriodBoolean){//还款最后一期
   		  							buyRamount 							= FixedBasisMortgageUtil.getLastMonthPrincipal(utprinamount, repayMentSize, scale);//每月还款真本金
 				 	  			}else{
 				 	  				buyRamount 							= FixedBasisMortgageUtil.getMonthPrincipal(utprinamount, repayMentSize, scale);//每月还款真本金
 				 	  			}
    		  				}else if(repaymentproSrt.equals((short)3)){//等额本息
   		  						 Map<Integer,BigDecimal> rinterestMap 	= FixedPaymentMortgageUtil.getMonthInterest(utprinamount, yearRate,repayMentSize,scale);//真现金每月还款利息
   		  						 buyRinterest  							= rinterestMap.get(j).doubleValue();//真现金每月还款利息
	 						     if(lasePeriodBoolean){//还款最后一期
	 						    	buyRamount 							= FixedPaymentMortgageUtil.getLastMonthPrincipal(utprinamount, yearRate,repayMentSize, scale);//每月还款真本金
 						    	 }else{
				 		    		Map<Integer,BigDecimal> ramountMap	= FixedPaymentMortgageUtil.getMonthPrincipal(utprinamount, yearRate,repayMentSize, scale);//每月还款真本金
				 		    		buyRamount 							= ramountMap.get(j).doubleValue();//每月还款真本金
 						    	 }
    		  				}else if(repaymentproSrt.equals((short)4)){//先息后本
    		  					buyRinterest			=  OneTimeServicingUtil.getMonthInterest(utprinamount, repayMentSize, yearRate, scale);//真现金每月还款利息
 			 					if(lasePeriodBoolean){//还款最后一期
 			 						buyRamount 							= utprinamount;//每月还款真本金
 						    	}else{
 						    		buyRamount 							= 0.00;//每月还款真本金
 						    	}
    		  			    }
    		  				buyRptotalintCount  		= Double.valueOf(df.format(buyRinterest + buyRamount));//债权承接人当期还款本息
    		  				ramount						= Double.valueOf(df.format(ment.getRamount() - buyRamount + 0.00));//当期还款真现金
    		  				rinterest					= Double.valueOf(df.format(ment.getRinterest() - buyRinterest + 0.00));//当期还款真现金的利息
    		  				if(j == 1){
    		  					buyRestamountintprofit = Double.valueOf(df.format(buyRinterestCount - buyRinterest));//剩余利息
   		  						buyRestprincipal	   = Double.valueOf(df.format(utprinamount - buyRamount));//剩余本金
     		  				}else{
   		  						buyRestamountintprofit = Double.valueOf(df.format(buyRestamountintprofit - buyRinterest));//剩余利息
		  						buyRestprincipal	   = Double.valueOf(df.format(buyRestprincipal - buyRamount));//剩余本金
    		  				}
    		  				restprincipal 		  	   = Double.valueOf(df.format(ment.getRestprincipal() - buyRestprincipal));//债权转让人剩余本金
    		  				rptotalintCount 		   = Double.valueOf(df.format(rinterest + ramount));//当期还款本息
    		  				restamountintprofit		   = Double.valueOf(df.format(ment.getRestamountintprofit() - buyRestamountintprofit + 0.00));//剩余本金产生的利息
  		  				}else{//债权转让人没有剩余本金了
  		  					isDebtAttornBoolean = true;//全部债权转让
  		  					buyRinterest = ment.getRinterest();//当期还款真现金的利息
  		  					buyRamount	 = ment.getRamount();//当期还款真现金
  		  					buyRestamountintprofit = ment.getRestamountintprofit();//剩余利息
  		  					buyRestprincipal	= ment.getRestprincipal(); //剩余本金
  		  					buyRptotalintCount = Double.valueOf(df.format(buyRinterest + buyRamount));//当期还款本息
	  		  				ramount		= 0.00;//当期还款真现金
			  				restprincipal = 0.00;//当期剩余真现金
			  				rinterest	= 0.00;//当期还款真现金的利息
			  				restamountintprofit	= 0.00;//剩余本金产生的利息
			  				rptotalintCount = 0.00;//当期还款本息
  		  				}
  		  			 	
  		  			Map<String,Object> maps2  = new HashMap<String,Object>();
 	 				maps2.put("tenderid", tenderItem.getId());//标的ID
	 				maps2.put("utorderno", ordId);//投标订单号 根据具体投标记录对应还款
	 				maps2.put("periods", ment.getPeriods());//分期还款计划期数
	 				maps2.put("planstatus", (short)1);//是否有效
	 				repayMent2 	 = repayMentServiceI.findRepayMentByConditions(maps2);//分期还款计划信息
	 	  			if(repayMent2 == null){//防止重复添加
		 	  				InterestExpenseRecord interestExpenseRecord5 = interestExpenseRecordServiceI.findInterestExpenseRecordByRorderno(ment.getRorderno());
		   		  		    interestExpenseRecord5.setPlanstatus((short)2);
		   		  		    interestExpenseRecordServiceI.updateById(interestExpenseRecord5);
	   		  			    ment.setPlanstatus((short)2);//还款计划状态(1有效，2无效)
	   		  			    repayMentServiceI.updateById(ment);
		 	  				/*****债权承接人的利息 和还款 开始******/
		 	  				if(isaintexpBoolean){//设置了标的利息管理费收取
		 	  					buyinterestExpense2 			= getInterestExpense(interestExpenses, buyUserAccountSafeInfo);
				  				Assert.notNull(buyinterestExpense2, "'buyinterestExpense2' 标的利息管理费设置对象不能null");
				  				double iepercent 			=  buyinterestExpense2.getIepercent();//利息管理费百份比
 				   		    	double maxiefee 	 		=  buyinterestExpense2.getMaxiefee();//该段最高利息管理收费金额
				  	 		    double fee1 = Arith.round(Arith.mul(buyRinterestCount, iepercent), 2);
				   		    	  
				   		    	if(fee1 >= maxiefee){
				   		    		buyIetype 					= 3;//利息管理费收取类型（1百分比，2最低，3最高）
				   		    		fee1   					= maxiefee;
				   		    	}
				   		    	buycountInterestexpense 			= Double.parseDouble(df.format(fee1));//利息管理费
				   		    	buyinterestexpense = Double.parseDouble(df.format(buycountInterestexpense / repayMentSize));
					  		 }
		 	  				if(lasePeriodBoolean){
		 	  					buyinterestexpense = Double.parseDouble(df.format(buycountInterestexpense - buyinterestexpenseAdd));
		 	  				}else{
		 	  					buyinterestexpenseAdd = Double.parseDouble(df.format( buyinterestexpenseAdd + buyinterestexpense));
		 	  				}
		 	  				  
	 	 	  				RepayMent repayMent5 = new RepayMent();
			 	  	  		repayMent5.setRorderno(StringUtil.getNo());				//还款流水号
			 	  	  		if(ment.getOutaccountid() != null){
			 	  	  			repayMent5.setOutaccountid(ment.getOutaccountid());		//借款用户ID
			 	  	  		}
			 	  	  		repayMent5.setInaccountid(buyCustIdInfoBaseId);			//投资用户ID
			 	  	  		if(proxyaccountid != null){//防止空指针异常
				 	  	  		repayMent5.setProxyaccountid(proxyaccountid);	//代还款人ID
			 	  	  		}
	 		 	  	  		repayMent5.setUtorderno(ordId);				//投标订单号 根据具体投标记录对应还款
			 	  	  		repayMent5.setTenderid(tenderItem.getId());		//标号ID
			 	  	  		repayMent5.setPeriods(ment.getPeriods());		//还款期数（第几期）
				 	  	   	repayMent5.setIsdarepay((short)0);				//是否债转还款(投标记录发生过债转 1是0否)
				 	  	  	repayMent5.setRmode((short)1);					//还款模式（1人工，2系统，3线下）
				 	  	  	repayMent5.setRptotalamount(buyRamount);	    //当期还款总金额(真本金+类现金)
			 	  	  		repayMent5.setRptotalint(buyRinterest);		//还款总利息(真现金利息+假现金利息+类现金利息+加息券利息)
				 	  	  	repayMent5.setRprincipalint(buyRptotalintCount);	//当期还款总本息息（总本金+总利息） 
			 	  	  		repayMent5.setRamount(buyRamount);				//当期还款金额（当期本金）
			 	  	  		repayMent5.setRvoucher(0.00);				//当期还款类现金
			 	  	  		repayMent5.setRlvoucher(0.00);				//当期还款假现金
			 	  	  		repayMent5.setOverdueamount(0.00);				//当期逾期滞纳金额
			 	  	  		repayMent5.setRinterest(buyRinterest);				//当期还款本金利息（当期本金利息）
			 	  	  		repayMent5.setRlvoucherint(0.00);		//当期还款假现金的利息
			 	  	  		repayMent5.setRvoucherint(0.00);			//当期还款类现金的利息
			 	  	  		repayMent5.setRintfee(0.00);					//当期还款加息劵的利息
				 	  	  	repayMent5.setRestprincipal(buyRestprincipal);	//剩余本金
			 	  	  		repayMent5.setRestvoucher(0.00);			//剩余类现金
			 	  	  		repayMent5.setRestlvoucher(0.00);		//剩余假现金
			 	  	  		repayMent5.setRestocamount(0.00);				//剩余滞纳金 剩余本金产生的滞纳金
			 	  	  		repayMent5.setVrestocamount(0.00);				//剩余类现金滞纳金 剩余类现金产生的滞纳金
			 	  	  		repayMent5.setRestamountintprofit(buyRestamountintprofit);	//剩余本金产生的利息 （原收益+剩余加息劵收益）     *  本金
			 	  	  		repayMent5.setRestvoucherintprofit(0.00);		//剩余类现金产生的利息 （原收益+加息劵收益）    *  剩余类现金
			 	  	  		repayMent5.setRestlvoucherintprofit(0.00);		//剩余假现金产生的利息 （原收益+加息劵收益）*  剩余假现金
			 	  	  		repayMent5.setRestintprofit(0.00);		//剩余加息卷收益
			 	  	  		repayMent5.setDisableocamount(0.00);			//失效滞纳金 失效本金产生的滞纳金
			 	  	  		repayMent5.setDisablevoucher(0.00);				//失效类现金
			 	  	  		repayMent5.setDisablelvoucher(0.00);			//失效假现金
			 	  	  		repayMent5.setDisablevoucherint(0.00);			//失效类现金利息
			 	  	  		repayMent5.setDisablevocamount(0.00);			//失效类现金滞纳金 失效类现金产生的滞纳金
			 	  	  		repayMent5.setDisableintprofit(0.00);			//失效加息卷收益
			 	  	  		repayMent5.setTransferprincipal(0.00);			//已转让本金
				 	  	  	repayMent5.setBpenalty(0.00);					//提前还款欠收利息 提前还款
			 	  	  		repayMent5.setOverdueamount(0.00);				//逾期滞纳金额 注意是否有代偿
			 	  	  		repayMent5.setInterestexpense(buycountInterestexpense);	//投标利息的管理费 投资人—》平台
			 	  	  		repayMent5.setIsproxyrepay((short)0);			//是否代偿（1是，0否）
			 	  	  		repayMent5.setFee(buycountInterestexpense);		//还款总利息费 还款金额利息+提前还款欠收利息+逾期滞纳金额
	  		 	  	  		repayMent5.setRepaystatus((short)1);			//还款状态(1未还款，2已还款，3已提前还款，4处理中)
	  		 	  	     	repayMent5.setIsaudit(repayMentIsAudit);		//是否审核  0不需要审核 1待审核 2审核通过 3审核不通过
			 	  	  		repayMent5.setIsblending((short)0);				//是否系统勾兑（0未勾兑，1已勾兑）
			 	  	  		repayMent5.setRtime(ment.getRtime());			//还款时间
			 	  	  		repayMent5.setAddtime(new Date());  				//制表时间
			 	  	  		repayMent5.setIsmanblending((short)0);			//是否人工勾兑（0未勾兑，1已勾兑）
			 	  	   		repayMent5.setPaycompany("汇付天下");				//托管通道公司（汇付天下）
			 	  	   		repayMent5.setPlanstatus((short)1);				//还款计划状态(1有效，2无效)
			 	  	 		/*******************标的分期还款计划结束*****************************************/
			 	  			repayMentServiceI.insertSelective(repayMent5);
			 	  			     
			 	  			if(isaintexpBoolean){//设置了标的利息管理费收取
				  				/**********标的利息管理费记录开始*************/
								InterestExpenseRecord interestExpenseRecord = new InterestExpenseRecord();
								interestExpenseRecord.setIeorderno(StringUtil.getNo());						//利息管理费流水号
								interestExpenseRecord.setRorderno(repayMent5.getRorderno());				//还款流水号
								if(buyinterestExpense2 != null){
									interestExpenseRecord.setIeid(buyinterestExpense2.getId());				//利息管理费设置表Id  
								}
								interestExpenseRecord.setTenderid(tenderItem.getId());						//标号ID
								if(buyinterestExpense2.getIerecmanid() != null){
		 							interestExpenseRecord.setIntexpmanid(buyinterestExpense2.getIerecmanid());	//利息管理费收款人ID 汇付天下没有这个接口
								}
								interestExpenseRecord.setInvestorid(buyCustIdInfoBaseId);			//投资人ID
								interestExpenseRecord.setIntexpfee(buyinterestexpense);						//利息管理费
								interestExpenseRecord.setIetype(buyIetype);									//利息管理费收取类型（1百分比，2最低，3最高）
								interestExpenseRecord.setIsdeal((short)0);									//是否处理（0否，1是）
								interestExpenseRecord.setMadetime(new Date());								//创建时间
								interestExpenseRecord.setPlanstatus((short)1);								//利息管理费收取计划状态 1有效 2 无效
			   					interestExpenseRecord.setIeproperty((short)1);							    //管理费属性 1正常投标2 债权转让后
								interestExpenseRecordServiceI.insertSelective(interestExpenseRecord);
	 							/**********标的利息管理费记录结束*************/
				  			 }
			 	  			    
			 	  			/*****债权承接人的利息 和还款 结束******/  
			 	  			
			 	  			/*****债权转让人的利息 和还款 开始******/
  			 	  			if(!isDebtAttornBoolean || isFalseEnvelopeBoolean || isClassEnvelopeBoolean){//使用了加息券，假现金，类现金
   			 	  				if(isaintexpBoolean){//设置了标的利息管理费收取
   			 	  					selinterestExpense2 			= getInterestExpense(interestExpenses, selUserAccountSafeInfo);
  					  				Assert.notNull(selinterestExpense2, "'selinterestExpense2' 标的利息管理费设置对象不能null");
  					  				double iepercent 			=  selinterestExpense2.getIepercent();//利息管理费百份比
   					   		    	double maxiefee 	 		=  selinterestExpense2.getMaxiefee();//该段最高利息管理收费金额
  					  	 		    double fee1 = Arith.round(Arith.mul(selRinterestCount, iepercent), 2);
   					   		    	if(fee1 >= maxiefee){
  					   		    		selIetype 				= 3;//利息管理费收取类型（1百分比，2最低，3最高）
  					   		    		fee1   					= maxiefee;
  					   		    	}
  					   		    	selcountInterestexpense 			= Double.parseDouble(df.format(fee1));//利息管理费
  					   		    	selinterestexpense = Double.parseDouble(df.format(selcountInterestexpense / repayMentSize));
  						  		 }
  			 	  				if(lasePeriodBoolean){
  			 	  					selinterestexpense = Double.parseDouble(df.format(selcountInterestexpense - selinterestexpenseAdd));
  			 	  				}else{
  			 	  					selinterestexpenseAdd = Double.parseDouble(df.format(selinterestexpenseAdd + buyinterestexpense));
  			 	  				}
    			 	  			if(Intdisable.equals((short)1)){//1全部失效
   			 	  					if(isFalseEnvelopeBoolean){//假现金
   			 	  					   rlvoucher   				= 0.00;//当期还款假现金
   			 	  					   restlvoucher				= 0.00;//剩余假现金
   			 	  					   disablelvoucher			= ment.getDisablelvoucher();//失效假现金
   			 	  					   rlvoucherint				= 0.00;//当期还款假现金的利息
   			 	  					   restlvoucherintprofit 	= 0.00;//剩余假现金产生的利息
 	  			 	  				}
	  			 	  				if(isClassEnvelopeBoolean){//类现金
	  			 	  					rvoucher    = 0.00;//当期还款类现金
	  			 	  					restvoucher	= 0.00;//剩余类现金
	  			 	  					disablevoucher	= ment.getDisablevoucher();//失效类现金
	  			 	  				    rvoucherint	= 0.00;//当期还款类现金的利息
	  			 	  				    restvoucherintprofit = 0.00;//剩余类现金产生的利息
	  			 	  				    disablevoucherint = ment.getDisablevoucherint();//失效类现金利息
				 	  				}
	  			 	  				if(isIcrateBoolean){//加息券
	  			 	  					rintfee = 0.00; //当期加息卷的利息
	  			 	  					restintprofit = 0.00;//剩余加息卷收益的利息
	  			 	  				    disableintprofit = ment.getDisableintprofit();//失效加息卷收益
	  			 	  				}
  			 	  				}else if(Intdisable.equals((short)2)){//2按债转金额比例失效
  			 	  					if(isFalseEnvelopeBoolean){//假现金
  			 	  						disablelvoucher	= Double.valueOf(df.format((ment.getRlvoucher() * K) + 0.00));//失效假现金
  			 	  						rlvoucher  		= Double.valueOf(df.format( ment.getRlvoucher() -disablelvoucher + 0.00));//当期还款假现金
			 	  					    restlvoucher	= Double.valueOf(df.format(ment.getRestlvoucher() - (ment.getRestlvoucher() * K) + 0.00));//剩余假现金
			 	  					    rlvoucherint	= Double.valueOf(df.format(ment.getRlvoucherint() - (ment.getRlvoucherint() * K) + 0.00));//当期还款假现金的利息
			 	  					    restlvoucherintprofit = Double.valueOf(df.format(ment.getRestlvoucherintprofit() - (ment.getRestlvoucherintprofit() * K) + 0.00));//剩余假现金产生的利息
	  			 	  				}
	  			 	  				if(isClassEnvelopeBoolean){//类现金
	  			 	  					disablevoucher	  = Double.valueOf(df.format((ment.getRvoucher() * K) + 0.00));//失效类现金
	  			 	  					disablevoucherint = Double.valueOf(df.format((ment.getRvoucherint() * K) + 0.00));//失效类现金利息
	  			 	  					rvoucher    = Double.valueOf(df.format(ment.getRvoucher() - disablevoucher + 0.00));//当期还款类现金
	  			 	  					restvoucher	= Double.valueOf(df.format(ment.getRestvoucher() - (ment.getRestvoucher() * K) + 0.00));//剩余类现金
	  			 	  				    rvoucherint	= Double.valueOf(df.format( ment.getRvoucherint() - disablevoucherint + 0.00));//当期还款类现金的利息
	  			 	  				    restvoucherintprofit = Double.valueOf(df.format( ment.getRestvoucherintprofit() - (ment.getRestvoucherintprofit() * K) + 0.00));//剩余类现金产生的利息
				 	  				}
	  			 	  				if(isIcrateBoolean){//加息券
	  			 	  					disableintprofit = Double.valueOf(df.format((ment.getRintfee() * K) + 0.00));//失效加息卷收益
	  			 	  					rintfee = Double.valueOf(df.format(ment.getRintfee() - disableintprofit + 0.00)); //当期加息卷的利息
	  			 	  					restintprofit = Double.valueOf(df.format( ment.getRestintprofit() - (ment.getRestintprofit() * K) + 0.00));//剩余加息卷收益的利息
	  			 	  				}
  			 	  				}else if(Intdisable.equals((short)3)){//3不作废
	  			 	  				if(isFalseEnvelopeBoolean){//假现金
			 	  					   rlvoucher   = ment.getRlvoucher();//当期还款假现金
			 	  					   restlvoucher	= ment.getRestlvoucher();//剩余假现金
			 	  					   disablelvoucher	= 0.00;//失效假现金
			 	  					   rlvoucherint		= ment.getRlvoucherint();//当期还款假现金的利息
			 	  					   restlvoucherintprofit = ment.getRestlvoucherintprofit();//剩余假现金产生的利息
	  			 	  				}
	  			 	  				if(isClassEnvelopeBoolean){//类现金
	  			 	  					rvoucher    = ment.getRvoucher();//当期还款类现金
	  			 	  					restvoucher	= ment.getRestvoucher();//剩余类现金
	  			 	  					disablevoucher	= 0.00;//失效类现金
	  			 	  				    rvoucherint	= ment.getRvoucherint();//当期还款类现金的利息
	  			 	  				    restvoucherintprofit = ment.getRestvoucherintprofit();//剩余类现金产生的利息
	  			 	  				    disablevoucherint = 0.00;//失效类现金利息
				 	  				}
	  			 	  				if(isIcrateBoolean){//加息券
	  			 	  					rintfee = ment.getRintfee(); //当期加息卷的利息
	  			 	  					restintprofit = ment.getRestintprofit();//剩余加息卷收益的利息
	  			 	  				    disableintprofit = 0.00;//失效加息卷收益
	  			 	  				}
  			 	  				} 			 
    			 	  			interestCount = Double.valueOf(df.format(rinterest + rlvoucherint + rvoucherint + rintfee));//还款利息总和(真本金利息+假现金利息+类现金利息+加息券利息)
    			 	  			rptotalamountCount = Double.valueOf(df.format(ramount + rvoucher));//当期还款总金额(真本金+类现金)
    			 	  			rptotalintCount = Double.valueOf(df.format(interestCount + rptotalamountCount));//当期还款本息
    			 	  			utprinamount = Double.valueOf(df.format(utprinamount + ment.getTransferprincipal()));//已转让金额
   		 	 	  				RepayMent repayMent6 = new RepayMent();
  				 	  	  		repayMent6.setRorderno(StringUtil.getNo());				//还款流水号
  				 	  	  		if(ment.getOutaccountid() != null){
  				 	  	  			repayMent6.setOutaccountid(ment.getOutaccountid());		//借款用户ID
  				 	  	  		}
  				 	  	  		repayMent6.setInaccountid(selCustIdInfoBaseId);			//投资用户ID
  				 	  	  		if(proxyaccountid != null){//防止空指针异常
  					 	  	  		repayMent6.setProxyaccountid(proxyaccountid);	//代还款人ID
  				 	  	  		}
    		 		 	  	  	repayMent6.setUtorderno(Olddaorderno);		 	//投标订单号 根据具体投标记录对应还款
  				 	  	  		repayMent6.setTenderid(tenderItem.getId());		//标号ID
  				 	  	  		repayMent6.setPeriods(ment.getPeriods());		//还款期数（第几期）
  					 	  	   	repayMent6.setIsdarepay((short)0);				//是否债转还款(投标记录发生过债转 1是0否)
  					 	  	  	repayMent6.setRmode((short)1);					//还款模式（1人工，2系统，3线下）
  					 	  	  	repayMent6.setRptotalamount(rptotalamountCount);//当期还款总金额(真本金+类现金)
  				 	  	  		repayMent6.setRptotalint(interestCount);		//还款总利息(真现金利息+假现金利息+类现金利息+加息券利息)
  					 	  	  	repayMent6.setRprincipalint(rptotalintCount);	//当期还款总本息息（总本金+总利息） 
  				 	  	  		repayMent6.setRamount(ramount);				//当期还款金额（当期本金）
  				 	  	  		repayMent6.setRvoucher(rvoucher);				//当期还款类现金
  				 	  	  		repayMent6.setRlvoucher(rlvoucher);				//当期还款假现金
  				 	  	  		repayMent6.setOverdueamount(0.00);				//当期逾期滞纳金额
  				 	  	  		repayMent6.setRinterest(rinterest);				//当期还款本金利息（当期本金利息）
  				 	  	  		repayMent6.setRlvoucherint(rlvoucherint);		//当期还款假现金的利息
  				 	  	  		repayMent6.setRvoucherint(rvoucherint);			//当期还款类现金的利息
  				 	  	  		repayMent6.setRintfee(rintfee);					//当期还款加息劵的利息
  					 	  	  	repayMent6.setRestprincipal(restprincipal);		//剩余本金
  				 	  	  		repayMent6.setRestvoucher(restvoucher);			//剩余类现金
  				 	  	  		repayMent6.setRestlvoucher(restlvoucher);		//剩余假现金
  				 	  	  		repayMent6.setRestocamount(0.00);				//剩余滞纳金 剩余本金产生的滞纳金
  				 	  	  		repayMent6.setVrestocamount(0.00);				//剩余类现金滞纳金 剩余类现金产生的滞纳金
  				 	  	  		repayMent6.setRestamountintprofit(restamountintprofit);	//剩余本金产生的利息 （原收益+剩余加息劵收益）     *  本金
  				 	  	  		repayMent6.setRestvoucherintprofit(restvoucherintprofit);//剩余类现金产生的利息 （原收益+加息劵收益）    *  剩余类现金
  				 	  	  		repayMent6.setRestlvoucherintprofit(restlvoucherintprofit);//剩余假现金产生的利息 （原收益+加息劵收益）*  剩余假现金
  				 	  	  		repayMent6.setRestintprofit(restintprofit);		//剩余加息卷收益
  				 	  	  		repayMent6.setDisableocamount(0.00);			//失效滞纳金 失效本金产生的滞纳金
  				 	  	  		repayMent6.setDisablevoucher(disablevoucher);	//失效类现金
  				 	  	  		repayMent6.setDisablelvoucher(disablelvoucher);	//失效假现金
  				 	  	  		repayMent6.setDisablevoucherint(disablevoucherint);	//失效类现金利息
  				 	  	  		repayMent6.setDisablevocamount(0.00);			//失效类现金滞纳金 失效类现金产生的滞纳金
  				 	  	  		repayMent6.setDisableintprofit(disableintprofit);//失效加息卷收益
  				 	  	  		repayMent6.setTransferprincipal(utprinamount);	//已转让本金
  					 	  	  	repayMent6.setBpenalty(0.00);					//提前还款欠收利息 提前还款
  				 	  	  		repayMent6.setOverdueamount(0.00);				//逾期滞纳金额 注意是否有代偿
  				 	  	  		repayMent6.setInterestexpense(selinterestexpense);	//投标利息的管理费 投资人—》平台
  				 	  	  		repayMent6.setIsproxyrepay((short)0);			//是否代偿（1是，0否）
  				 	  	  		repayMent6.setFee(selinterestexpense);			//还款总利息费 还款金额利息+提前还款欠收利息+逾期滞纳金额
  		  		 	  	  		repayMent6.setRepaystatus((short)1);			//还款状态(1未还款，2已还款，3已提前还款，4处理中)
  		  		 	  	     	repayMent6.setIsaudit(repayMentIsAudit);		//是否审核  0不需要审核 1待审核 2审核通过 3审核不通过
  				 	  	  		repayMent6.setIsblending((short)0);				//是否系统勾兑（0未勾兑，1已勾兑）
  				 	  	  		repayMent6.setRtime(ment.getRtime());			//还款时间
  				 	  	  		repayMent6.setAddtime(new Date());  			//制表时间
  				 	  	  		repayMent6.setIsmanblending((short)0);			//是否人工勾兑（0未勾兑，1已勾兑）
  				 	  	   		repayMent6.setPaycompany("汇付天下");				//托管通道公司（汇付天下）
  				 	  	   		repayMent6.setPlanstatus((short)1);				//还款计划状态(1有效，2无效)
  				 	  	 		/*******************标的分期还款计划结束*****************************************/
  				 	  			repayMentServiceI.insertSelective(repayMent6);
  				 	  			     
  				 	  			if(isaintexpBoolean){//设置了标的利息管理费收取
  					  				/**********标的利息管理费记录开始*************/
  									InterestExpenseRecord interestExpenseRecord2 = new InterestExpenseRecord();
  									interestExpenseRecord2.setIeorderno(StringUtil.getNo());					//利息管理费流水号
  									interestExpenseRecord2.setRorderno(repayMent6.getRorderno());				//还款流水号
  									if(selinterestExpense2 != null){
  										interestExpenseRecord2.setIeid(selinterestExpense2.getId());			//利息管理费设置表Id  
  									}
  									interestExpenseRecord2.setTenderid(tenderItem.getId());						//标号ID
  									if(selinterestExpense2.getIerecmanid() != null){
  			 							interestExpenseRecord2.setIntexpmanid(selinterestExpense2.getIerecmanid());	//利息管理费收款人ID 汇付天下没有这个接口
  									}
  									interestExpenseRecord2.setInvestorid(selCustIdInfoBaseId);			//投资人ID
  									interestExpenseRecord2.setIntexpfee(selinterestexpense);					//利息管理费
  									interestExpenseRecord2.setIetype(selIetype);								//利息管理费收取类型（1百分比，2最低，3最高）
  									interestExpenseRecord2.setIsdeal((short)0);									//是否处理（0否，1是）
  									interestExpenseRecord2.setMadetime(new Date());								//创建时间
  									interestExpenseRecord2.setPlanstatus((short)1);								//利息管理费收取计划状态 1有效 2 无效
  				   					interestExpenseRecord2.setIeproperty((short)1);							    //管理费属性 1正常投标2 债权转让后
  									interestExpenseRecordServiceI.insertSelective(interestExpenseRecord2);
  		 							/**********标的利息管理费记录结束*************/
  					  			 }
			 	  			}
			 	  			/*****债权转让人的利息 和还款 结束******/
	 	 	  			}
  		  			}
				} 
			}else{//逾期债权转让
				 
			}
  	  		  
    	}else{
  			throw new IllegalArgumentException("错误！！！！没有找的标的具体还款计划 ！！！！！");
  		}
  		/**
		 * 作废债权转让人的还款计划，利息管理费计划
		 * 生成新的债权转让人，债权承接人的还款计划，利息管理费计划
		 * 根据标的设置 等比例或全部作废增益手段
 		 * 注意：如何判断债权转让人是全部债权转让？？？？？
		 */
 	}
  	
	/**
	* 
	* @Title: getInterestExpense 
	* @Description: TODO(获取对应的利息管理费设置对象) 
	* @param @param interestExpenses
	* @param @param userAccountSafeInfo
	* @param @return  参数说明 
	* @return InterestExpense    返回类型 
	* @author cjm
	* @throws
	 */
	public static InterestExpense getInterestExpense(List<InterestExpense> interestExpenses,UserAccountSafeInfo userAccountSafeInfo){
		if(interestExpenses != null && interestExpenses.size() > 0){
			InterestExpense interestExpense = null;
			for(InterestExpense interestExpense1 : interestExpenses){
	 				char[] charit = interestExpense1.getUgrade().toCharArray();
 				if(charit.length > (userAccountSafeInfo.getUgrade()) && charit[userAccountSafeInfo.getUgrade()] == '1'  ){
 					interestExpense = interestExpense1;
 					break;
 				} 
 			}
			return interestExpense;
		}
		return null;
	}
	
	/**
	 * 
	* @ClassName: repayMentComparator 
	* @Package com.ptpl.web.util 
	* @Description: TODO(内部类 用于降序 排序) 
	* @author cjm
	* @date 2016年10月27日 下午4:24:47 
	* @version V1.0
	 */
	 private class RepayMentComparator implements Comparator<RepayMent>{
		@Override
		public int compare(RepayMent o1, RepayMent o2) {
			if(o1.getPeriods() < o2.getPeriods()){
				return -1;
			}else{
				return 1;
			}
		}
	}
 }
